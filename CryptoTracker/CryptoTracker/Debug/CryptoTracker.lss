
CryptoTracker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000c46  00000cda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800130  00800130  00000d0a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011a7  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b2  00000000  00000000  00001fcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a2  00000000  00000000  00002881  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00002f24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000516  00000000  00000000  000030b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009cd  00000000  00000000  000035c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003f93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e3       	ldi	r26, 0x30	; 48
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 33       	cpi	r26, 0x34	; 52
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <main>
  9e:	0c 94 21 06 	jmp	0xc42	; 0xc42 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
		alarm_port |= (1<<alarm_bit);// turn alarm on
		_delay_ms(150);
		alarm_port &= ~(1<<alarm_bit);// turn alarm off
		_delay_ms(150);
	}
}
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <currentCrypto>
  b8:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <currentCrypto+0x1>
  bc:	00 97       	sbiw	r24, 0x00	; 0
  be:	19 f0       	breq	.+6      	; 0xc6 <__vector_1+0x20>
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	41 f0       	breq	.+16     	; 0xd4 <__vector_1+0x2e>
  c4:	0b c0       	rjmp	.+22     	; 0xdc <__vector_1+0x36>
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <currentCrypto+0x1>
  ce:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <currentCrypto>
  d2:	04 c0       	rjmp	.+8      	; 0xdc <__vector_1+0x36>
  d4:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <currentCrypto+0x1>
  d8:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <currentCrypto>
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <usart_init>:
// - set frame format 8 data, 2 stop bit
/////////////////////////////////////////////////
void usart_init(void)
{
	// Set baud rate
	UBRR0H = (uint8_t)(UBRR_VALUE>>8);
  ea:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)UBRR_VALUE;
  ee:	87 e6       	ldi	r24, 0x67	; 103
  f0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
  f4:	e2 ec       	ldi	r30, 0xC2	; 194
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	86 60       	ori	r24, 0x06	; 6
  fc:	80 83       	st	Z, r24
	//enable transmission and reception
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
  fe:	e1 ec       	ldi	r30, 0xC1	; 193
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	88 61       	ori	r24, 0x18	; 24
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <usart_rx>:
// purpose: receives data from bluetooth module
/////////////////////////////////////////////////
uint16_t usart_rx(void)
{
	// Wait for byte to be received
	while(!(UCSR0A&(1<<RXC0))){};
 10a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 10e:	88 23       	and	r24, r24
 110:	e4 f7       	brge	.-8      	; 0x10a <usart_rx>
	// Return received data
	return UDR0;
 112:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	08 95       	ret

0000011a <get_string>:

/////////////////////////////////////////////////
// function: get_string
// purpose: gets string from bluetooth module
/////////////////////////////////////////////////
const char* get_string(char input_str[]){
 11a:	cf 92       	push	r12
 11c:	df 92       	push	r13
 11e:	ef 92       	push	r14
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
 12e:	2a 97       	sbiw	r28, 0x0a	; 10
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	f8 94       	cli
 134:	de bf       	out	0x3e, r29	; 62
 136:	0f be       	out	0x3f, r0	; 63
 138:	cd bf       	out	0x3d, r28	; 61
 13a:	6c 01       	movw	r12, r24
	char buffer[10];
	uint16_t input = usart_rx();
 13c:	0e 94 85 00 	call	0x10a	; 0x10a <usart_rx>
	
	int i = 0;
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	10 e0       	ldi	r17, 0x00	; 0
	while (input != '\n'){
 144:	14 c0       	rjmp	.+40     	; 0x16e <get_string+0x54>
		itoa(input, buffer, 10);
 146:	4a e0       	ldi	r20, 0x0A	; 10
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	be 01       	movw	r22, r28
 14c:	6f 5f       	subi	r22, 0xFF	; 255
 14e:	7f 4f       	sbci	r23, 0xFF	; 255
 150:	0e 94 ef 02 	call	0x5de	; 0x5de <itoa>
		input_str[i] = atoi(buffer);
 154:	76 01       	movw	r14, r12
 156:	e0 0e       	add	r14, r16
 158:	f1 1e       	adc	r15, r17
 15a:	ce 01       	movw	r24, r28
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	0e 94 a5 02 	call	0x54a	; 0x54a <atoi>
 162:	f7 01       	movw	r30, r14
 164:	80 83       	st	Z, r24
		i = i + 1;
 166:	0f 5f       	subi	r16, 0xFF	; 255
 168:	1f 4f       	sbci	r17, 0xFF	; 255
		input = usart_rx();
 16a:	0e 94 85 00 	call	0x10a	; 0x10a <usart_rx>
const char* get_string(char input_str[]){
	char buffer[10];
	uint16_t input = usart_rx();
	
	int i = 0;
	while (input != '\n'){
 16e:	8a 30       	cpi	r24, 0x0A	; 10
 170:	91 05       	cpc	r25, r1
 172:	49 f7       	brne	.-46     	; 0x146 <get_string+0x2c>
		i = i + 1;
		input = usart_rx();
	}
	
	return input_str;
}
 174:	c6 01       	movw	r24, r12
 176:	2a 96       	adiw	r28, 0x0a	; 10
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	f8 94       	cli
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	0f be       	out	0x3f, r0	; 63
 180:	cd bf       	out	0x3d, r28	; 61
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	ff 90       	pop	r15
 18c:	ef 90       	pop	r14
 18e:	df 90       	pop	r13
 190:	cf 90       	pop	r12
 192:	08 95       	ret

00000194 <store_prices>:

//////////////////////////
// function: store_prices
// purpose: gets price string and converts string to array of prices
char* store_prices(const char str[], char price_array[10][10]){
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	00 d0       	rcall	.+0      	; 0x1a2 <store_prices+0xe>
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
 1a6:	7b 01       	movw	r14, r22
	const char s[2] = ",";
 1a8:	2c e2       	ldi	r18, 0x2C	; 44
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	3a 83       	std	Y+2, r19	; 0x02
 1ae:	29 83       	std	Y+1, r18	; 0x01
	char *token;
	int i = 0;
	char buffer[10];
	/* get the first token */
	token = strtok(str, s);
 1b0:	be 01       	movw	r22, r28
 1b2:	6f 5f       	subi	r22, 0xFF	; 255
 1b4:	7f 4f       	sbci	r23, 0xFF	; 255
 1b6:	0e 94 c3 02 	call	0x586	; 0x586 <strtok>
// function: store_prices
// purpose: gets price string and converts string to array of prices
char* store_prices(const char str[], char price_array[10][10]){
	const char s[2] = ",";
	char *token;
	int i = 0;
 1ba:	00 e0       	ldi	r16, 0x00	; 0
 1bc:	10 e0       	ldi	r17, 0x00	; 0
	char buffer[10];
	/* get the first token */
	token = strtok(str, s);
	
	/* walk through other tokens */
	while( token != NULL ) {
 1be:	28 c0       	rjmp	.+80     	; 0x210 <store_prices+0x7c>
		sprintf(price_array[i], " %s", token );
 1c0:	a8 01       	movw	r20, r16
 1c2:	44 0f       	add	r20, r20
 1c4:	55 1f       	adc	r21, r21
 1c6:	98 01       	movw	r18, r16
 1c8:	22 0f       	add	r18, r18
 1ca:	33 1f       	adc	r19, r19
 1cc:	22 0f       	add	r18, r18
 1ce:	33 1f       	adc	r19, r19
 1d0:	22 0f       	add	r18, r18
 1d2:	33 1f       	adc	r19, r19
 1d4:	24 0f       	add	r18, r20
 1d6:	35 1f       	adc	r19, r21
 1d8:	9f 93       	push	r25
 1da:	8f 93       	push	r24
 1dc:	84 e1       	ldi	r24, 0x14	; 20
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	9f 93       	push	r25
 1e2:	8f 93       	push	r24
 1e4:	c7 01       	movw	r24, r14
 1e6:	82 0f       	add	r24, r18
 1e8:	93 1f       	adc	r25, r19
 1ea:	9f 93       	push	r25
 1ec:	8f 93       	push	r24
 1ee:	0e 94 27 03 	call	0x64e	; 0x64e <sprintf>
		
		i = i + 1;
 1f2:	0f 5f       	subi	r16, 0xFF	; 255
 1f4:	1f 4f       	sbci	r17, 0xFF	; 255
		token = strtok(NULL, s);
 1f6:	be 01       	movw	r22, r28
 1f8:	6f 5f       	subi	r22, 0xFF	; 255
 1fa:	7f 4f       	sbci	r23, 0xFF	; 255
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 c3 02 	call	0x586	; 0x586 <strtok>
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
	char buffer[10];
	/* get the first token */
	token = strtok(str, s);
	
	/* walk through other tokens */
	while( token != NULL ) {
 210:	00 97       	sbiw	r24, 0x00	; 0
 212:	b1 f6       	brne	.-84     	; 0x1c0 <store_prices+0x2c>
		i = i + 1;
		token = strtok(NULL, s);
	}
	
	return price_array;
}
 214:	c7 01       	movw	r24, r14
 216:	0f 90       	pop	r0
 218:	0f 90       	pop	r0
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	ff 90       	pop	r15
 224:	ef 90       	pop	r14
 226:	08 95       	ret

00000228 <lcd_write>:
// function: lcd_write
// purpose: send a byte nibble by nibble to the LCD
/////////////////////////////////////////////////
void lcd_write(uint8_t theByte)
{
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
 228:	98 b1       	in	r25, 0x08	; 8
 22a:	97 7f       	andi	r25, 0xF7	; 247
 22c:	98 b9       	out	0x08, r25	; 8
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
 22e:	88 23       	and	r24, r24
 230:	1c f4       	brge	.+6      	; 0x238 <lcd_write+0x10>
 232:	98 b1       	in	r25, 0x08	; 8
 234:	98 60       	ori	r25, 0x08	; 8
 236:	98 b9       	out	0x08, r25	; 8

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
 238:	98 b1       	in	r25, 0x08	; 8
 23a:	9b 7f       	andi	r25, 0xFB	; 251
 23c:	98 b9       	out	0x08, r25	; 8
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
 23e:	86 ff       	sbrs	r24, 6
 240:	03 c0       	rjmp	.+6      	; 0x248 <lcd_write+0x20>
 242:	98 b1       	in	r25, 0x08	; 8
 244:	94 60       	ori	r25, 0x04	; 4
 246:	98 b9       	out	0x08, r25	; 8

    lcd_D5_port &= ~(1<<lcd_D5_bit);
 248:	98 b1       	in	r25, 0x08	; 8
 24a:	9d 7f       	andi	r25, 0xFD	; 253
 24c:	98 b9       	out	0x08, r25	; 8
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
 24e:	85 ff       	sbrs	r24, 5
 250:	03 c0       	rjmp	.+6      	; 0x258 <lcd_write+0x30>
 252:	98 b1       	in	r25, 0x08	; 8
 254:	92 60       	ori	r25, 0x02	; 2
 256:	98 b9       	out	0x08, r25	; 8

    lcd_D4_port &= ~(1<<lcd_D4_bit);
 258:	98 b1       	in	r25, 0x08	; 8
 25a:	9e 7f       	andi	r25, 0xFE	; 254
 25c:	98 b9       	out	0x08, r25	; 8
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
 25e:	84 ff       	sbrs	r24, 4
 260:	03 c0       	rjmp	.+6      	; 0x268 <lcd_write+0x40>
 262:	88 b1       	in	r24, 0x08	; 8
 264:	81 60       	ori	r24, 0x01	; 1
 266:	88 b9       	out	0x08, r24	; 8

    lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
 268:	85 b1       	in	r24, 0x05	; 5
 26a:	88 60       	ori	r24, 0x08	; 8
 26c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26e:	85 e0       	ldi	r24, 0x05	; 5
 270:	8a 95       	dec	r24
 272:	f1 f7       	brne	.-4      	; 0x270 <lcd_write+0x48>
 274:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
 276:	85 b1       	in	r24, 0x05	; 5
 278:	87 7f       	andi	r24, 0xF7	; 247
 27a:	85 b9       	out	0x05, r24	; 5
 27c:	85 e0       	ldi	r24, 0x05	; 5
 27e:	8a 95       	dec	r24
 280:	f1 f7       	brne	.-4      	; 0x27e <lcd_write+0x56>
 282:	00 00       	nop
 284:	08 95       	ret

00000286 <lcd_write_char>:
// function: lcd_write_char
// purpose: send a byte nibble by nibble as
// a character
/////////////////////////////////////////////////
void lcd_write_char(uint8_t theData)
{
 286:	cf 93       	push	r28
 288:	c8 2f       	mov	r28, r24
    lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
 28a:	85 b1       	in	r24, 0x05	; 5
 28c:	80 62       	ori	r24, 0x20	; 32
 28e:	85 b9       	out	0x05, r24	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
 290:	85 b1       	in	r24, 0x05	; 5
 292:	87 7f       	andi	r24, 0xF7	; 247
 294:	85 b9       	out	0x05, r24	; 5
    lcd_write(theData);                           // write the upper 4-bits of the data
 296:	8c 2f       	mov	r24, r28
 298:	0e 94 14 01 	call	0x228	; 0x228 <lcd_write>
    lcd_write(theData << 4);                      // write the lower 4-bits of the data
 29c:	8c 2f       	mov	r24, r28
 29e:	82 95       	swap	r24
 2a0:	80 7f       	andi	r24, 0xF0	; 240
 2a2:	0e 94 14 01 	call	0x228	; 0x228 <lcd_write>
}
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <lcd_write_str>:
// function: lcd_write_str
// purpose: sends a string to the LCD to be 
// displayed
/////////////////////////////////////////////////
void lcd_write_str(uint8_t theString[])
{
 2aa:	0f 93       	push	r16
 2ac:	1f 93       	push	r17
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	00 d0       	rcall	.+0      	; 0x2b4 <lcd_write_str+0xa>
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // character counter*/
 2ba:	1a 82       	std	Y+2, r1	; 0x02
 2bc:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
 2be:	12 c0       	rjmp	.+36     	; 0x2e4 <lcd_write_str+0x3a>
    {
        lcd_write_char(theString[i]);
 2c0:	e9 81       	ldd	r30, Y+1	; 0x01
 2c2:	fa 81       	ldd	r31, Y+2	; 0x02
 2c4:	e0 0f       	add	r30, r16
 2c6:	f1 1f       	adc	r31, r17
 2c8:	80 81       	ld	r24, Z
 2ca:	0e 94 43 01 	call	0x286	; 0x286 <lcd_write_char>
        i++;
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	9a 81       	ldd	r25, Y+2	; 0x02
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	9a 83       	std	Y+2, r25	; 0x02
 2d6:	89 83       	std	Y+1, r24	; 0x01
 2d8:	8f e3       	ldi	r24, 0x3F	; 63
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <lcd_write_str+0x32>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <lcd_write_str+0x38>
 2e2:	00 00       	nop
// displayed
/////////////////////////////////////////////////
void lcd_write_str(uint8_t theString[])
{
    volatile int i = 0;                             // character counter*/
    while (theString[i] != 0)
 2e4:	e9 81       	ldd	r30, Y+1	; 0x01
 2e6:	fa 81       	ldd	r31, Y+2	; 0x02
 2e8:	e0 0f       	add	r30, r16
 2ea:	f1 1f       	adc	r31, r17
 2ec:	80 81       	ld	r24, Z
 2ee:	81 11       	cpse	r24, r1
 2f0:	e7 cf       	rjmp	.-50     	; 0x2c0 <lcd_write_str+0x16>
    {
        lcd_write_char(theString[i]);
        i++;
        _delay_us(80);                              // 40 uS delay (min)
    }
}
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	08 95       	ret

00000300 <lcd_write_instruction>:
// function: lcd_write_instruction
// purpose: send a byte nibble by nibble to
// the LCD as an instruction
/////////////////////////////////////////////////
void lcd_write_instruction(uint8_t theInstruction)
{
 300:	cf 93       	push	r28
 302:	c8 2f       	mov	r28, r24
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
 304:	85 b1       	in	r24, 0x05	; 5
 306:	8f 7d       	andi	r24, 0xDF	; 223
 308:	85 b9       	out	0x05, r24	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
 30a:	85 b1       	in	r24, 0x05	; 5
 30c:	87 7f       	andi	r24, 0xF7	; 247
 30e:	85 b9       	out	0x05, r24	; 5
    lcd_write(theInstruction);                    // write the upper 4-bits of the data
 310:	8c 2f       	mov	r24, r28
 312:	0e 94 14 01 	call	0x228	; 0x228 <lcd_write>
    lcd_write(theInstruction << 4);               // write the lower 4-bits of the data
 316:	8c 2f       	mov	r24, r28
 318:	82 95       	swap	r24
 31a:	80 7f       	andi	r24, 0xF0	; 240
 31c:	0e 94 14 01 	call	0x228	; 0x228 <lcd_write>
}
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <move_to_line_2>:
/////////////////////////////////////////////////
// Function: move_to_line_2
// Purpose: moves cursor to line 2
/////////////////////////////////////////////////
void move_to_line_2(void){
  lcd_write_instruction(lcd_SetCursor | lcd_LineTwo);
 324:	80 ec       	ldi	r24, 0xC0	; 192
 326:	0e 94 80 01 	call	0x300	; 0x300 <lcd_write_instruction>
 32a:	8f e3       	ldi	r24, 0x3F	; 63
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <move_to_line_2+0xa>
 332:	00 c0       	rjmp	.+0      	; 0x334 <move_to_line_2+0x10>
 334:	00 00       	nop
 336:	08 95       	ret

00000338 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 338:	2f ef       	ldi	r18, 0xFF	; 255
 33a:	81 ee       	ldi	r24, 0xE1	; 225
 33c:	94 e0       	ldi	r25, 0x04	; 4
 33e:	21 50       	subi	r18, 0x01	; 1
 340:	80 40       	sbci	r24, 0x00	; 0
 342:	90 40       	sbci	r25, 0x00	; 0
 344:	e1 f7       	brne	.-8      	; 0x33e <lcd_init+0x6>
 346:	00 c0       	rjmp	.+0      	; 0x348 <lcd_init+0x10>
 348:	00 00       	nop
  // delay for a bit so hardware can do it's thing
    _delay_ms(100);    
                               
    // note we start in 8 bit mode, so we gotta change that
    // Set up the RS and E lines for the 'lcd_write' subroutine.
    lcd_RS_port &= ~(1<<lcd_RS_bit);
 34a:	85 b1       	in	r24, 0x05	; 5
 34c:	8f 7d       	andi	r24, 0xDF	; 223
 34e:	85 b9       	out	0x05, r24	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  
 350:	85 b1       	in	r24, 0x05	; 5
 352:	87 7f       	andi	r24, 0xF7	; 247
 354:	85 b9       	out	0x05, r24	; 5

    // Setup the LCD
    lcd_write(lcd_reset); // first part of reset sequence
 356:	80 e3       	ldi	r24, 0x30	; 48
 358:	0e 94 14 01 	call	0x228	; 0x228 <lcd_write>
 35c:	8f e3       	ldi	r24, 0x3F	; 63
 35e:	9c e9       	ldi	r25, 0x9C	; 156
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <lcd_init+0x28>
 364:	00 c0       	rjmp	.+0      	; 0x366 <lcd_init+0x2e>
 366:	00 00       	nop
    _delay_ms(10);

    lcd_write(lcd_reset); // second part of reset sequence
 368:	80 e3       	ldi	r24, 0x30	; 48
 36a:	0e 94 14 01 	call	0x228	; 0x228 <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36e:	8f e1       	ldi	r24, 0x1F	; 31
 370:	93 e0       	ldi	r25, 0x03	; 3
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <lcd_init+0x3a>
 376:	00 c0       	rjmp	.+0      	; 0x378 <lcd_init+0x40>
 378:	00 00       	nop
    _delay_us(200);

    lcd_write(lcd_reset); // third part of reset sequence
 37a:	80 e3       	ldi	r24, 0x30	; 48
 37c:	0e 94 14 01 	call	0x228	; 0x228 <lcd_write>
 380:	8f e1       	ldi	r24, 0x1F	; 31
 382:	93 e0       	ldi	r25, 0x03	; 3
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <lcd_init+0x4c>
 388:	00 c0       	rjmp	.+0      	; 0x38a <lcd_init+0x52>
 38a:	00 00       	nop
    _delay_us(200); 
 
    lcd_write(lcd_setTo4Bit); // set 4-bit mode
 38c:	88 e2       	ldi	r24, 0x28	; 40
 38e:	0e 94 14 01 	call	0x228	; 0x228 <lcd_write>
 392:	8f e3       	ldi	r24, 0x3F	; 63
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <lcd_init+0x5e>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <lcd_init+0x64>
 39c:	00 00       	nop
    _delay_us(80);

    // Function Set instruction
    lcd_write_instruction(lcd_setTo4Bit); 
 39e:	88 e2       	ldi	r24, 0x28	; 40
 3a0:	0e 94 80 01 	call	0x300	; 0x300 <lcd_write_instruction>
 3a4:	8f e3       	ldi	r24, 0x3F	; 63
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <lcd_init+0x70>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <lcd_init+0x76>
 3ae:	00 00       	nop
    _delay_us(80);  

    // Display On
    lcd_write_instruction(lcd_DisplayOff);        
 3b0:	88 e0       	ldi	r24, 0x08	; 8
 3b2:	0e 94 80 01 	call	0x300	; 0x300 <lcd_write_instruction>
 3b6:	8f e3       	ldi	r24, 0x3F	; 63
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <lcd_init+0x82>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <lcd_init+0x88>
 3c0:	00 00       	nop
    _delay_us(80); 

    // Clear Display
    lcd_write_instruction(lcd_Clear);            
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 80 01 	call	0x300	; 0x300 <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c8:	8f e7       	ldi	r24, 0x7F	; 127
 3ca:	9e e3       	ldi	r25, 0x3E	; 62
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <lcd_init+0x94>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <lcd_init+0x9a>
 3d2:	00 00       	nop
    _delay_ms(4);                                  

    // Entry Mode Set instruction
    lcd_write_instruction(lcd_EntryMode);  
 3d4:	86 e0       	ldi	r24, 0x06	; 6
 3d6:	0e 94 80 01 	call	0x300	; 0x300 <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3da:	8f e3       	ldi	r24, 0x3F	; 63
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <lcd_init+0xa6>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <lcd_init+0xac>
 3e4:	00 00       	nop
    _delay_us(80);                                  
 
    // Display On/Off Control instruction
    lcd_write_instruction(lcd_DisplayOn);         
 3e6:	8c e0       	ldi	r24, 0x0C	; 12
 3e8:	0e 94 80 01 	call	0x300	; 0x300 <lcd_write_instruction>
 3ec:	8f e3       	ldi	r24, 0x3F	; 63
 3ee:	91 e0       	ldi	r25, 0x01	; 1
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <lcd_init+0xb8>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <lcd_init+0xbe>
 3f6:	00 00       	nop
 3f8:	08 95       	ret

000003fa <main>:
/////////////////////////////////////////////////
// Function: move_to_line_2
// Purpose: moves cursor to line 2
/////////////////////////////////////////////////
int main(void)
{	
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
 402:	ca 5a       	subi	r28, 0xAA	; 170
 404:	d1 09       	sbc	r29, r1
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	f8 94       	cli
 40a:	de bf       	out	0x3e, r29	; 62
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	cd bf       	out	0x3d, r28	; 61
	// storage variables
	int alarmPercent = 10; // default alarm to 10 percent change
	char cryptos[2][10] = { "Bitcoin",		// supported crypto names. Index = current crypto int
 410:	84 e1       	ldi	r24, 0x14	; 20
 412:	e0 e0       	ldi	r30, 0x00	; 0
 414:	f1 e0       	ldi	r31, 0x01	; 1
 416:	de 01       	movw	r26, r28
 418:	11 96       	adiw	r26, 0x01	; 1
 41a:	01 90       	ld	r0, Z+
 41c:	0d 92       	st	X+, r0
 41e:	8a 95       	dec	r24
 420:	e1 f7       	brne	.-8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
					"Ethereum"};
	char prices[10][10];
	
	// configure the data lines for output to LCD
    lcd_D7_ddr |= (1<<lcd_D7_bit);
 422:	87 b1       	in	r24, 0x07	; 7
 424:	88 60       	ori	r24, 0x08	; 8
 426:	87 b9       	out	0x07, r24	; 7
    lcd_D6_ddr |= (1<<lcd_D6_bit);
 428:	87 b1       	in	r24, 0x07	; 7
 42a:	84 60       	ori	r24, 0x04	; 4
 42c:	87 b9       	out	0x07, r24	; 7
    lcd_D5_ddr |= (1<<lcd_D5_bit);
 42e:	87 b1       	in	r24, 0x07	; 7
 430:	82 60       	ori	r24, 0x02	; 2
 432:	87 b9       	out	0x07, r24	; 7
    lcd_D4_ddr |= (1<<lcd_D4_bit);
 434:	87 b1       	in	r24, 0x07	; 7
 436:	81 60       	ori	r24, 0x01	; 1
 438:	87 b9       	out	0x07, r24	; 7
	
	// configure data lines for output to alarm
	alarm_ddr |= (1<<alarm_bit);
 43a:	84 b1       	in	r24, 0x04	; 4
 43c:	81 60       	ori	r24, 0x01	; 1
 43e:	84 b9       	out	0x04, r24	; 4
	

	// configure the data lines for controlling the LCD
    lcd_E_ddr |= (1<<lcd_E_bit);        // Enable
 440:	84 b1       	in	r24, 0x04	; 4
 442:	88 60       	ori	r24, 0x08	; 8
 444:	84 b9       	out	0x04, r24	; 4
    lcd_RS_ddr |= (1<<lcd_RS_bit);    // Register Select
 446:	84 b1       	in	r24, 0x04	; 4
 448:	80 62       	ori	r24, 0x20	; 32
 44a:	84 b9       	out	0x04, r24	; 4

	// init lcd and usart
    lcd_init();
 44c:	0e 94 9c 01 	call	0x338	; 0x338 <lcd_init>
	usart_init();
 450:	0e 94 75 00 	call	0xea	; 0xea <usart_init>

	// Type welcome message
    lcd_write_str("Welcome to");
 454:	88 e1       	ldi	r24, 0x18	; 24
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_write_str>
    move_to_line_2();
 45c:	0e 94 92 01 	call	0x324	; 0x324 <move_to_line_2>
    lcd_write_str("CryptoTicker");
 460:	83 e2       	ldi	r24, 0x23	; 35
 462:	91 e0       	ldi	r25, 0x01	; 1
 464:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_write_str>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 468:	2f ef       	ldi	r18, 0xFF	; 255
 46a:	33 e2       	ldi	r19, 0x23	; 35
 46c:	84 ef       	ldi	r24, 0xF4	; 244
 46e:	21 50       	subi	r18, 0x01	; 1
 470:	30 40       	sbci	r19, 0x00	; 0
 472:	80 40       	sbci	r24, 0x00	; 0
 474:	e1 f7       	brne	.-8      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 476:	00 c0       	rjmp	.+0      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 478:	00 00       	nop
	
	// display welcome message for 5 seconds
	// and then clear the screen
	_delay_ms(5000);
	lcd_write_instruction(lcd_Clear);
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	0e 94 80 01 	call	0x300	; 0x300 <lcd_write_instruction>
 480:	9f ef       	ldi	r25, 0xFF	; 255
 482:	27 ee       	ldi	r18, 0xE7	; 231
 484:	33 e0       	ldi	r19, 0x03	; 3
 486:	91 50       	subi	r25, 0x01	; 1
 488:	20 40       	sbci	r18, 0x00	; 0
 48a:	30 40       	sbci	r19, 0x00	; 0
 48c:	e1 f7       	brne	.-8      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 490:	00 00       	nop
	_delay_ms(80);
	
	// set INT0 to trigger on ANY logic change
	EICRA |= (1 << ISC00);
 492:	e9 e6       	ldi	r30, 0x69	; 105
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	81 60       	ori	r24, 0x01	; 1
 49a:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);
 49c:	8d b3       	in	r24, 0x1d	; 29
 49e:	81 60       	ori	r24, 0x01	; 1
 4a0:	8d bb       	out	0x1d, r24	; 29
	sei();
 4a2:	78 94       	sei

    // main program loop
    while(1){
		// wait for prices to update
		char input_str[50];
		get_string(input_str);
 4a4:	ce 01       	movw	r24, r28
 4a6:	87 58       	subi	r24, 0x87	; 135
 4a8:	9f 4f       	sbci	r25, 0xFF	; 255
 4aa:	0e 94 8d 00 	call	0x11a	; 0x11a <get_string>
		store_prices(input_str,prices);
 4ae:	be 01       	movw	r22, r28
 4b0:	6b 5e       	subi	r22, 0xEB	; 235
 4b2:	7f 4f       	sbci	r23, 0xFF	; 255
 4b4:	ce 01       	movw	r24, r28
 4b6:	87 58       	subi	r24, 0x87	; 135
 4b8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ba:	0e 94 ca 00 	call	0x194	; 0x194 <store_prices>
		
		lcd_write_instruction(lcd_Clear);
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	0e 94 80 01 	call	0x300	; 0x300 <lcd_write_instruction>
 4c4:	8f ef       	ldi	r24, 0xFF	; 255
 4c6:	97 ee       	ldi	r25, 0xE7	; 231
 4c8:	23 e0       	ldi	r18, 0x03	; 3
 4ca:	81 50       	subi	r24, 0x01	; 1
 4cc:	90 40       	sbci	r25, 0x00	; 0
 4ce:	20 40       	sbci	r18, 0x00	; 0
 4d0:	e1 f7       	brne	.-8      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 4d4:	00 00       	nop
		_delay_ms(80);
		
		lcd_write_str(cryptos[currentCrypto]);
 4d6:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <currentCrypto>
 4da:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <currentCrypto+0x1>
 4de:	c9 01       	movw	r24, r18
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	22 0f       	add	r18, r18
 4e6:	33 1f       	adc	r19, r19
 4e8:	22 0f       	add	r18, r18
 4ea:	33 1f       	adc	r19, r19
 4ec:	22 0f       	add	r18, r18
 4ee:	33 1f       	adc	r19, r19
 4f0:	82 0f       	add	r24, r18
 4f2:	93 1f       	adc	r25, r19
 4f4:	21 e0       	ldi	r18, 0x01	; 1
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	2c 0f       	add	r18, r28
 4fa:	3d 1f       	adc	r19, r29
 4fc:	82 0f       	add	r24, r18
 4fe:	93 1f       	adc	r25, r19
 500:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_write_str>
		move_to_line_2();
 504:	0e 94 92 01 	call	0x324	; 0x324 <move_to_line_2>
 508:	3f ef       	ldi	r19, 0xFF	; 255
 50a:	87 ee       	ldi	r24, 0xE7	; 231
 50c:	93 e0       	ldi	r25, 0x03	; 3
 50e:	31 50       	subi	r19, 0x01	; 1
 510:	80 40       	sbci	r24, 0x00	; 0
 512:	90 40       	sbci	r25, 0x00	; 0
 514:	e1 f7       	brne	.-8      	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
 516:	00 c0       	rjmp	.+0      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 518:	00 00       	nop
		_delay_ms(80);
		lcd_write_str(prices[currentCrypto]);
 51a:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <currentCrypto>
 51e:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <currentCrypto+0x1>
 522:	c9 01       	movw	r24, r18
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	22 0f       	add	r18, r18
 52a:	33 1f       	adc	r19, r19
 52c:	22 0f       	add	r18, r18
 52e:	33 1f       	adc	r19, r19
 530:	22 0f       	add	r18, r18
 532:	33 1f       	adc	r19, r19
 534:	82 0f       	add	r24, r18
 536:	93 1f       	adc	r25, r19
 538:	25 e1       	ldi	r18, 0x15	; 21
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	2c 0f       	add	r18, r28
 53e:	3d 1f       	adc	r19, r29
 540:	82 0f       	add	r24, r18
 542:	93 1f       	adc	r25, r19
 544:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_write_str>
 548:	ad cf       	rjmp	.-166    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>

0000054a <atoi>:
 54a:	fc 01       	movw	r30, r24
 54c:	88 27       	eor	r24, r24
 54e:	99 27       	eor	r25, r25
 550:	e8 94       	clt
 552:	21 91       	ld	r18, Z+
 554:	20 32       	cpi	r18, 0x20	; 32
 556:	e9 f3       	breq	.-6      	; 0x552 <atoi+0x8>
 558:	29 30       	cpi	r18, 0x09	; 9
 55a:	10 f0       	brcs	.+4      	; 0x560 <atoi+0x16>
 55c:	2e 30       	cpi	r18, 0x0E	; 14
 55e:	c8 f3       	brcs	.-14     	; 0x552 <atoi+0x8>
 560:	2b 32       	cpi	r18, 0x2B	; 43
 562:	41 f0       	breq	.+16     	; 0x574 <atoi+0x2a>
 564:	2d 32       	cpi	r18, 0x2D	; 45
 566:	39 f4       	brne	.+14     	; 0x576 <atoi+0x2c>
 568:	68 94       	set
 56a:	04 c0       	rjmp	.+8      	; 0x574 <atoi+0x2a>
 56c:	0e 94 05 03 	call	0x60a	; 0x60a <__mulhi_const_10>
 570:	82 0f       	add	r24, r18
 572:	91 1d       	adc	r25, r1
 574:	21 91       	ld	r18, Z+
 576:	20 53       	subi	r18, 0x30	; 48
 578:	2a 30       	cpi	r18, 0x0A	; 10
 57a:	c0 f3       	brcs	.-16     	; 0x56c <atoi+0x22>
 57c:	1e f4       	brtc	.+6      	; 0x584 <atoi+0x3a>
 57e:	90 95       	com	r25
 580:	81 95       	neg	r24
 582:	9f 4f       	sbci	r25, 0xFF	; 255
 584:	08 95       	ret

00000586 <strtok>:
 586:	40 e3       	ldi	r20, 0x30	; 48
 588:	51 e0       	ldi	r21, 0x01	; 1
 58a:	0e 94 c8 02 	call	0x590	; 0x590 <strtok_r>
 58e:	08 95       	ret

00000590 <strtok_r>:
 590:	fa 01       	movw	r30, r20
 592:	a1 91       	ld	r26, Z+
 594:	b0 81       	ld	r27, Z
 596:	00 97       	sbiw	r24, 0x00	; 0
 598:	19 f4       	brne	.+6      	; 0x5a0 <strtok_r+0x10>
 59a:	10 97       	sbiw	r26, 0x00	; 0
 59c:	e1 f0       	breq	.+56     	; 0x5d6 <strtok_r+0x46>
 59e:	cd 01       	movw	r24, r26
 5a0:	dc 01       	movw	r26, r24
 5a2:	cd 01       	movw	r24, r26
 5a4:	0d 90       	ld	r0, X+
 5a6:	00 20       	and	r0, r0
 5a8:	11 f4       	brne	.+4      	; 0x5ae <strtok_r+0x1e>
 5aa:	c0 01       	movw	r24, r0
 5ac:	13 c0       	rjmp	.+38     	; 0x5d4 <strtok_r+0x44>
 5ae:	fb 01       	movw	r30, r22
 5b0:	21 91       	ld	r18, Z+
 5b2:	22 23       	and	r18, r18
 5b4:	19 f0       	breq	.+6      	; 0x5bc <strtok_r+0x2c>
 5b6:	20 15       	cp	r18, r0
 5b8:	d9 f7       	brne	.-10     	; 0x5b0 <strtok_r+0x20>
 5ba:	f3 cf       	rjmp	.-26     	; 0x5a2 <strtok_r+0x12>
 5bc:	fb 01       	movw	r30, r22
 5be:	21 91       	ld	r18, Z+
 5c0:	20 15       	cp	r18, r0
 5c2:	19 f4       	brne	.+6      	; 0x5ca <strtok_r+0x3a>
 5c4:	1e 92       	st	-X, r1
 5c6:	11 96       	adiw	r26, 0x01	; 1
 5c8:	06 c0       	rjmp	.+12     	; 0x5d6 <strtok_r+0x46>
 5ca:	22 23       	and	r18, r18
 5cc:	c1 f7       	brne	.-16     	; 0x5be <strtok_r+0x2e>
 5ce:	0d 90       	ld	r0, X+
 5d0:	00 20       	and	r0, r0
 5d2:	a1 f7       	brne	.-24     	; 0x5bc <strtok_r+0x2c>
 5d4:	d0 01       	movw	r26, r0
 5d6:	fa 01       	movw	r30, r20
 5d8:	a1 93       	st	Z+, r26
 5da:	b0 83       	st	Z, r27
 5dc:	08 95       	ret

000005de <itoa>:
 5de:	45 32       	cpi	r20, 0x25	; 37
 5e0:	51 05       	cpc	r21, r1
 5e2:	20 f4       	brcc	.+8      	; 0x5ec <itoa+0xe>
 5e4:	42 30       	cpi	r20, 0x02	; 2
 5e6:	10 f0       	brcs	.+4      	; 0x5ec <itoa+0xe>
 5e8:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__itoa_ncheck>
 5ec:	fb 01       	movw	r30, r22
 5ee:	10 82       	st	Z, r1
 5f0:	cb 01       	movw	r24, r22
 5f2:	08 95       	ret

000005f4 <__itoa_ncheck>:
 5f4:	bb 27       	eor	r27, r27
 5f6:	4a 30       	cpi	r20, 0x0A	; 10
 5f8:	31 f4       	brne	.+12     	; 0x606 <__itoa_ncheck+0x12>
 5fa:	99 23       	and	r25, r25
 5fc:	22 f4       	brpl	.+8      	; 0x606 <__itoa_ncheck+0x12>
 5fe:	bd e2       	ldi	r27, 0x2D	; 45
 600:	90 95       	com	r25
 602:	81 95       	neg	r24
 604:	9f 4f       	sbci	r25, 0xFF	; 255
 606:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__utoa_common>

0000060a <__mulhi_const_10>:
 60a:	7a e0       	ldi	r23, 0x0A	; 10
 60c:	97 9f       	mul	r25, r23
 60e:	90 2d       	mov	r25, r0
 610:	87 9f       	mul	r24, r23
 612:	80 2d       	mov	r24, r0
 614:	91 0d       	add	r25, r1
 616:	11 24       	eor	r1, r1
 618:	08 95       	ret

0000061a <__utoa_ncheck>:
 61a:	bb 27       	eor	r27, r27

0000061c <__utoa_common>:
 61c:	fb 01       	movw	r30, r22
 61e:	55 27       	eor	r21, r21
 620:	aa 27       	eor	r26, r26
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	aa 1f       	adc	r26, r26
 628:	a4 17       	cp	r26, r20
 62a:	10 f0       	brcs	.+4      	; 0x630 <__utoa_common+0x14>
 62c:	a4 1b       	sub	r26, r20
 62e:	83 95       	inc	r24
 630:	50 51       	subi	r21, 0x10	; 16
 632:	b9 f7       	brne	.-18     	; 0x622 <__utoa_common+0x6>
 634:	a0 5d       	subi	r26, 0xD0	; 208
 636:	aa 33       	cpi	r26, 0x3A	; 58
 638:	08 f0       	brcs	.+2      	; 0x63c <__utoa_common+0x20>
 63a:	a9 5d       	subi	r26, 0xD9	; 217
 63c:	a1 93       	st	Z+, r26
 63e:	00 97       	sbiw	r24, 0x00	; 0
 640:	79 f7       	brne	.-34     	; 0x620 <__utoa_common+0x4>
 642:	b1 11       	cpse	r27, r1
 644:	b1 93       	st	Z+, r27
 646:	11 92       	st	Z+, r1
 648:	cb 01       	movw	r24, r22
 64a:	0c 94 40 05 	jmp	0xa80	; 0xa80 <strrev>

0000064e <sprintf>:
 64e:	ae e0       	ldi	r26, 0x0E	; 14
 650:	b0 e0       	ldi	r27, 0x00	; 0
 652:	ed e2       	ldi	r30, 0x2D	; 45
 654:	f3 e0       	ldi	r31, 0x03	; 3
 656:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__prologue_saves__+0x1c>
 65a:	0d 89       	ldd	r16, Y+21	; 0x15
 65c:	1e 89       	ldd	r17, Y+22	; 0x16
 65e:	86 e0       	ldi	r24, 0x06	; 6
 660:	8c 83       	std	Y+4, r24	; 0x04
 662:	1a 83       	std	Y+2, r17	; 0x02
 664:	09 83       	std	Y+1, r16	; 0x01
 666:	8f ef       	ldi	r24, 0xFF	; 255
 668:	9f e7       	ldi	r25, 0x7F	; 127
 66a:	9e 83       	std	Y+6, r25	; 0x06
 66c:	8d 83       	std	Y+5, r24	; 0x05
 66e:	ae 01       	movw	r20, r28
 670:	47 5e       	subi	r20, 0xE7	; 231
 672:	5f 4f       	sbci	r21, 0xFF	; 255
 674:	6f 89       	ldd	r22, Y+23	; 0x17
 676:	78 8d       	ldd	r23, Y+24	; 0x18
 678:	ce 01       	movw	r24, r28
 67a:	01 96       	adiw	r24, 0x01	; 1
 67c:	0e 94 49 03 	call	0x692	; 0x692 <vfprintf>
 680:	ef 81       	ldd	r30, Y+7	; 0x07
 682:	f8 85       	ldd	r31, Y+8	; 0x08
 684:	e0 0f       	add	r30, r16
 686:	f1 1f       	adc	r31, r17
 688:	10 82       	st	Z, r1
 68a:	2e 96       	adiw	r28, 0x0e	; 14
 68c:	e4 e0       	ldi	r30, 0x04	; 4
 68e:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__epilogue_restores__+0x1c>

00000692 <vfprintf>:
 692:	ab e0       	ldi	r26, 0x0B	; 11
 694:	b0 e0       	ldi	r27, 0x00	; 0
 696:	ef e4       	ldi	r30, 0x4F	; 79
 698:	f3 e0       	ldi	r31, 0x03	; 3
 69a:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__prologue_saves__>
 69e:	6c 01       	movw	r12, r24
 6a0:	7b 01       	movw	r14, r22
 6a2:	8a 01       	movw	r16, r20
 6a4:	fc 01       	movw	r30, r24
 6a6:	17 82       	std	Z+7, r1	; 0x07
 6a8:	16 82       	std	Z+6, r1	; 0x06
 6aa:	83 81       	ldd	r24, Z+3	; 0x03
 6ac:	81 ff       	sbrs	r24, 1
 6ae:	cc c1       	rjmp	.+920    	; 0xa48 <__stack+0x149>
 6b0:	ce 01       	movw	r24, r28
 6b2:	01 96       	adiw	r24, 0x01	; 1
 6b4:	3c 01       	movw	r6, r24
 6b6:	f6 01       	movw	r30, r12
 6b8:	93 81       	ldd	r25, Z+3	; 0x03
 6ba:	f7 01       	movw	r30, r14
 6bc:	93 fd       	sbrc	r25, 3
 6be:	85 91       	lpm	r24, Z+
 6c0:	93 ff       	sbrs	r25, 3
 6c2:	81 91       	ld	r24, Z+
 6c4:	7f 01       	movw	r14, r30
 6c6:	88 23       	and	r24, r24
 6c8:	09 f4       	brne	.+2      	; 0x6cc <vfprintf+0x3a>
 6ca:	ba c1       	rjmp	.+884    	; 0xa40 <__stack+0x141>
 6cc:	85 32       	cpi	r24, 0x25	; 37
 6ce:	39 f4       	brne	.+14     	; 0x6de <vfprintf+0x4c>
 6d0:	93 fd       	sbrc	r25, 3
 6d2:	85 91       	lpm	r24, Z+
 6d4:	93 ff       	sbrs	r25, 3
 6d6:	81 91       	ld	r24, Z+
 6d8:	7f 01       	movw	r14, r30
 6da:	85 32       	cpi	r24, 0x25	; 37
 6dc:	29 f4       	brne	.+10     	; 0x6e8 <vfprintf+0x56>
 6de:	b6 01       	movw	r22, r12
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 6e6:	e7 cf       	rjmp	.-50     	; 0x6b6 <vfprintf+0x24>
 6e8:	91 2c       	mov	r9, r1
 6ea:	21 2c       	mov	r2, r1
 6ec:	31 2c       	mov	r3, r1
 6ee:	ff e1       	ldi	r31, 0x1F	; 31
 6f0:	f3 15       	cp	r31, r3
 6f2:	d8 f0       	brcs	.+54     	; 0x72a <vfprintf+0x98>
 6f4:	8b 32       	cpi	r24, 0x2B	; 43
 6f6:	79 f0       	breq	.+30     	; 0x716 <vfprintf+0x84>
 6f8:	38 f4       	brcc	.+14     	; 0x708 <vfprintf+0x76>
 6fa:	80 32       	cpi	r24, 0x20	; 32
 6fc:	79 f0       	breq	.+30     	; 0x71c <vfprintf+0x8a>
 6fe:	83 32       	cpi	r24, 0x23	; 35
 700:	a1 f4       	brne	.+40     	; 0x72a <vfprintf+0x98>
 702:	23 2d       	mov	r18, r3
 704:	20 61       	ori	r18, 0x10	; 16
 706:	1d c0       	rjmp	.+58     	; 0x742 <vfprintf+0xb0>
 708:	8d 32       	cpi	r24, 0x2D	; 45
 70a:	61 f0       	breq	.+24     	; 0x724 <vfprintf+0x92>
 70c:	80 33       	cpi	r24, 0x30	; 48
 70e:	69 f4       	brne	.+26     	; 0x72a <vfprintf+0x98>
 710:	23 2d       	mov	r18, r3
 712:	21 60       	ori	r18, 0x01	; 1
 714:	16 c0       	rjmp	.+44     	; 0x742 <vfprintf+0xb0>
 716:	83 2d       	mov	r24, r3
 718:	82 60       	ori	r24, 0x02	; 2
 71a:	38 2e       	mov	r3, r24
 71c:	e3 2d       	mov	r30, r3
 71e:	e4 60       	ori	r30, 0x04	; 4
 720:	3e 2e       	mov	r3, r30
 722:	2a c0       	rjmp	.+84     	; 0x778 <vfprintf+0xe6>
 724:	f3 2d       	mov	r31, r3
 726:	f8 60       	ori	r31, 0x08	; 8
 728:	1d c0       	rjmp	.+58     	; 0x764 <vfprintf+0xd2>
 72a:	37 fc       	sbrc	r3, 7
 72c:	2d c0       	rjmp	.+90     	; 0x788 <vfprintf+0xf6>
 72e:	20 ed       	ldi	r18, 0xD0	; 208
 730:	28 0f       	add	r18, r24
 732:	2a 30       	cpi	r18, 0x0A	; 10
 734:	40 f0       	brcs	.+16     	; 0x746 <vfprintf+0xb4>
 736:	8e 32       	cpi	r24, 0x2E	; 46
 738:	b9 f4       	brne	.+46     	; 0x768 <vfprintf+0xd6>
 73a:	36 fc       	sbrc	r3, 6
 73c:	81 c1       	rjmp	.+770    	; 0xa40 <__stack+0x141>
 73e:	23 2d       	mov	r18, r3
 740:	20 64       	ori	r18, 0x40	; 64
 742:	32 2e       	mov	r3, r18
 744:	19 c0       	rjmp	.+50     	; 0x778 <vfprintf+0xe6>
 746:	36 fe       	sbrs	r3, 6
 748:	06 c0       	rjmp	.+12     	; 0x756 <vfprintf+0xc4>
 74a:	8a e0       	ldi	r24, 0x0A	; 10
 74c:	98 9e       	mul	r9, r24
 74e:	20 0d       	add	r18, r0
 750:	11 24       	eor	r1, r1
 752:	92 2e       	mov	r9, r18
 754:	11 c0       	rjmp	.+34     	; 0x778 <vfprintf+0xe6>
 756:	ea e0       	ldi	r30, 0x0A	; 10
 758:	2e 9e       	mul	r2, r30
 75a:	20 0d       	add	r18, r0
 75c:	11 24       	eor	r1, r1
 75e:	22 2e       	mov	r2, r18
 760:	f3 2d       	mov	r31, r3
 762:	f0 62       	ori	r31, 0x20	; 32
 764:	3f 2e       	mov	r3, r31
 766:	08 c0       	rjmp	.+16     	; 0x778 <vfprintf+0xe6>
 768:	8c 36       	cpi	r24, 0x6C	; 108
 76a:	21 f4       	brne	.+8      	; 0x774 <vfprintf+0xe2>
 76c:	83 2d       	mov	r24, r3
 76e:	80 68       	ori	r24, 0x80	; 128
 770:	38 2e       	mov	r3, r24
 772:	02 c0       	rjmp	.+4      	; 0x778 <vfprintf+0xe6>
 774:	88 36       	cpi	r24, 0x68	; 104
 776:	41 f4       	brne	.+16     	; 0x788 <vfprintf+0xf6>
 778:	f7 01       	movw	r30, r14
 77a:	93 fd       	sbrc	r25, 3
 77c:	85 91       	lpm	r24, Z+
 77e:	93 ff       	sbrs	r25, 3
 780:	81 91       	ld	r24, Z+
 782:	7f 01       	movw	r14, r30
 784:	81 11       	cpse	r24, r1
 786:	b3 cf       	rjmp	.-154    	; 0x6ee <vfprintf+0x5c>
 788:	98 2f       	mov	r25, r24
 78a:	9f 7d       	andi	r25, 0xDF	; 223
 78c:	95 54       	subi	r25, 0x45	; 69
 78e:	93 30       	cpi	r25, 0x03	; 3
 790:	28 f4       	brcc	.+10     	; 0x79c <vfprintf+0x10a>
 792:	0c 5f       	subi	r16, 0xFC	; 252
 794:	1f 4f       	sbci	r17, 0xFF	; 255
 796:	9f e3       	ldi	r25, 0x3F	; 63
 798:	99 83       	std	Y+1, r25	; 0x01
 79a:	0d c0       	rjmp	.+26     	; 0x7b6 <vfprintf+0x124>
 79c:	83 36       	cpi	r24, 0x63	; 99
 79e:	31 f0       	breq	.+12     	; 0x7ac <vfprintf+0x11a>
 7a0:	83 37       	cpi	r24, 0x73	; 115
 7a2:	71 f0       	breq	.+28     	; 0x7c0 <vfprintf+0x12e>
 7a4:	83 35       	cpi	r24, 0x53	; 83
 7a6:	09 f0       	breq	.+2      	; 0x7aa <vfprintf+0x118>
 7a8:	59 c0       	rjmp	.+178    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 7aa:	21 c0       	rjmp	.+66     	; 0x7ee <vfprintf+0x15c>
 7ac:	f8 01       	movw	r30, r16
 7ae:	80 81       	ld	r24, Z
 7b0:	89 83       	std	Y+1, r24	; 0x01
 7b2:	0e 5f       	subi	r16, 0xFE	; 254
 7b4:	1f 4f       	sbci	r17, 0xFF	; 255
 7b6:	88 24       	eor	r8, r8
 7b8:	83 94       	inc	r8
 7ba:	91 2c       	mov	r9, r1
 7bc:	53 01       	movw	r10, r6
 7be:	13 c0       	rjmp	.+38     	; 0x7e6 <vfprintf+0x154>
 7c0:	28 01       	movw	r4, r16
 7c2:	f2 e0       	ldi	r31, 0x02	; 2
 7c4:	4f 0e       	add	r4, r31
 7c6:	51 1c       	adc	r5, r1
 7c8:	f8 01       	movw	r30, r16
 7ca:	a0 80       	ld	r10, Z
 7cc:	b1 80       	ldd	r11, Z+1	; 0x01
 7ce:	36 fe       	sbrs	r3, 6
 7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <vfprintf+0x146>
 7d2:	69 2d       	mov	r22, r9
 7d4:	70 e0       	ldi	r23, 0x00	; 0
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <vfprintf+0x14a>
 7d8:	6f ef       	ldi	r22, 0xFF	; 255
 7da:	7f ef       	ldi	r23, 0xFF	; 255
 7dc:	c5 01       	movw	r24, r10
 7de:	0e 94 35 05 	call	0xa6a	; 0xa6a <strnlen>
 7e2:	4c 01       	movw	r8, r24
 7e4:	82 01       	movw	r16, r4
 7e6:	f3 2d       	mov	r31, r3
 7e8:	ff 77       	andi	r31, 0x7F	; 127
 7ea:	3f 2e       	mov	r3, r31
 7ec:	16 c0       	rjmp	.+44     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7ee:	28 01       	movw	r4, r16
 7f0:	22 e0       	ldi	r18, 0x02	; 2
 7f2:	42 0e       	add	r4, r18
 7f4:	51 1c       	adc	r5, r1
 7f6:	f8 01       	movw	r30, r16
 7f8:	a0 80       	ld	r10, Z
 7fa:	b1 80       	ldd	r11, Z+1	; 0x01
 7fc:	36 fe       	sbrs	r3, 6
 7fe:	03 c0       	rjmp	.+6      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 800:	69 2d       	mov	r22, r9
 802:	70 e0       	ldi	r23, 0x00	; 0
 804:	02 c0       	rjmp	.+4      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 806:	6f ef       	ldi	r22, 0xFF	; 255
 808:	7f ef       	ldi	r23, 0xFF	; 255
 80a:	c5 01       	movw	r24, r10
 80c:	0e 94 2a 05 	call	0xa54	; 0xa54 <strnlen_P>
 810:	4c 01       	movw	r8, r24
 812:	f3 2d       	mov	r31, r3
 814:	f0 68       	ori	r31, 0x80	; 128
 816:	3f 2e       	mov	r3, r31
 818:	82 01       	movw	r16, r4
 81a:	33 fc       	sbrc	r3, 3
 81c:	1b c0       	rjmp	.+54     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 81e:	82 2d       	mov	r24, r2
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	88 16       	cp	r8, r24
 824:	99 06       	cpc	r9, r25
 826:	b0 f4       	brcc	.+44     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 828:	b6 01       	movw	r22, r12
 82a:	80 e2       	ldi	r24, 0x20	; 32
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 832:	2a 94       	dec	r2
 834:	f4 cf       	rjmp	.-24     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 836:	f5 01       	movw	r30, r10
 838:	37 fc       	sbrc	r3, 7
 83a:	85 91       	lpm	r24, Z+
 83c:	37 fe       	sbrs	r3, 7
 83e:	81 91       	ld	r24, Z+
 840:	5f 01       	movw	r10, r30
 842:	b6 01       	movw	r22, r12
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 84a:	21 10       	cpse	r2, r1
 84c:	2a 94       	dec	r2
 84e:	21 e0       	ldi	r18, 0x01	; 1
 850:	82 1a       	sub	r8, r18
 852:	91 08       	sbc	r9, r1
 854:	81 14       	cp	r8, r1
 856:	91 04       	cpc	r9, r1
 858:	71 f7       	brne	.-36     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 85a:	e8 c0       	rjmp	.+464    	; 0xa2c <__stack+0x12d>
 85c:	84 36       	cpi	r24, 0x64	; 100
 85e:	11 f0       	breq	.+4      	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 860:	89 36       	cpi	r24, 0x69	; 105
 862:	41 f5       	brne	.+80     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
 864:	f8 01       	movw	r30, r16
 866:	37 fe       	sbrs	r3, 7
 868:	07 c0       	rjmp	.+14     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 86a:	60 81       	ld	r22, Z
 86c:	71 81       	ldd	r23, Z+1	; 0x01
 86e:	82 81       	ldd	r24, Z+2	; 0x02
 870:	93 81       	ldd	r25, Z+3	; 0x03
 872:	0c 5f       	subi	r16, 0xFC	; 252
 874:	1f 4f       	sbci	r17, 0xFF	; 255
 876:	08 c0       	rjmp	.+16     	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 878:	60 81       	ld	r22, Z
 87a:	71 81       	ldd	r23, Z+1	; 0x01
 87c:	07 2e       	mov	r0, r23
 87e:	00 0c       	add	r0, r0
 880:	88 0b       	sbc	r24, r24
 882:	99 0b       	sbc	r25, r25
 884:	0e 5f       	subi	r16, 0xFE	; 254
 886:	1f 4f       	sbci	r17, 0xFF	; 255
 888:	f3 2d       	mov	r31, r3
 88a:	ff 76       	andi	r31, 0x6F	; 111
 88c:	3f 2e       	mov	r3, r31
 88e:	97 ff       	sbrs	r25, 7
 890:	09 c0       	rjmp	.+18     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 892:	90 95       	com	r25
 894:	80 95       	com	r24
 896:	70 95       	com	r23
 898:	61 95       	neg	r22
 89a:	7f 4f       	sbci	r23, 0xFF	; 255
 89c:	8f 4f       	sbci	r24, 0xFF	; 255
 89e:	9f 4f       	sbci	r25, 0xFF	; 255
 8a0:	f0 68       	ori	r31, 0x80	; 128
 8a2:	3f 2e       	mov	r3, r31
 8a4:	2a e0       	ldi	r18, 0x0A	; 10
 8a6:	30 e0       	ldi	r19, 0x00	; 0
 8a8:	a3 01       	movw	r20, r6
 8aa:	0e 94 8c 05 	call	0xb18	; 0xb18 <__ultoa_invert>
 8ae:	88 2e       	mov	r8, r24
 8b0:	86 18       	sub	r8, r6
 8b2:	45 c0       	rjmp	.+138    	; 0x93e <__stack+0x3f>
 8b4:	85 37       	cpi	r24, 0x75	; 117
 8b6:	31 f4       	brne	.+12     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
 8b8:	23 2d       	mov	r18, r3
 8ba:	2f 7e       	andi	r18, 0xEF	; 239
 8bc:	b2 2e       	mov	r11, r18
 8be:	2a e0       	ldi	r18, 0x0A	; 10
 8c0:	30 e0       	ldi	r19, 0x00	; 0
 8c2:	25 c0       	rjmp	.+74     	; 0x90e <__stack+0xf>
 8c4:	93 2d       	mov	r25, r3
 8c6:	99 7f       	andi	r25, 0xF9	; 249
 8c8:	b9 2e       	mov	r11, r25
 8ca:	8f 36       	cpi	r24, 0x6F	; 111
 8cc:	c1 f0       	breq	.+48     	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
 8ce:	18 f4       	brcc	.+6      	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
 8d0:	88 35       	cpi	r24, 0x58	; 88
 8d2:	79 f0       	breq	.+30     	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
 8d4:	b5 c0       	rjmp	.+362    	; 0xa40 <__stack+0x141>
 8d6:	80 37       	cpi	r24, 0x70	; 112
 8d8:	19 f0       	breq	.+6      	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
 8da:	88 37       	cpi	r24, 0x78	; 120
 8dc:	21 f0       	breq	.+8      	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
 8de:	b0 c0       	rjmp	.+352    	; 0xa40 <__stack+0x141>
 8e0:	e9 2f       	mov	r30, r25
 8e2:	e0 61       	ori	r30, 0x10	; 16
 8e4:	be 2e       	mov	r11, r30
 8e6:	b4 fe       	sbrs	r11, 4
 8e8:	0d c0       	rjmp	.+26     	; 0x904 <__stack+0x5>
 8ea:	fb 2d       	mov	r31, r11
 8ec:	f4 60       	ori	r31, 0x04	; 4
 8ee:	bf 2e       	mov	r11, r31
 8f0:	09 c0       	rjmp	.+18     	; 0x904 <__stack+0x5>
 8f2:	34 fe       	sbrs	r3, 4
 8f4:	0a c0       	rjmp	.+20     	; 0x90a <__stack+0xb>
 8f6:	29 2f       	mov	r18, r25
 8f8:	26 60       	ori	r18, 0x06	; 6
 8fa:	b2 2e       	mov	r11, r18
 8fc:	06 c0       	rjmp	.+12     	; 0x90a <__stack+0xb>
 8fe:	28 e0       	ldi	r18, 0x08	; 8
 900:	30 e0       	ldi	r19, 0x00	; 0
 902:	05 c0       	rjmp	.+10     	; 0x90e <__stack+0xf>
 904:	20 e1       	ldi	r18, 0x10	; 16
 906:	30 e0       	ldi	r19, 0x00	; 0
 908:	02 c0       	rjmp	.+4      	; 0x90e <__stack+0xf>
 90a:	20 e1       	ldi	r18, 0x10	; 16
 90c:	32 e0       	ldi	r19, 0x02	; 2
 90e:	f8 01       	movw	r30, r16
 910:	b7 fe       	sbrs	r11, 7
 912:	07 c0       	rjmp	.+14     	; 0x922 <__stack+0x23>
 914:	60 81       	ld	r22, Z
 916:	71 81       	ldd	r23, Z+1	; 0x01
 918:	82 81       	ldd	r24, Z+2	; 0x02
 91a:	93 81       	ldd	r25, Z+3	; 0x03
 91c:	0c 5f       	subi	r16, 0xFC	; 252
 91e:	1f 4f       	sbci	r17, 0xFF	; 255
 920:	06 c0       	rjmp	.+12     	; 0x92e <__stack+0x2f>
 922:	60 81       	ld	r22, Z
 924:	71 81       	ldd	r23, Z+1	; 0x01
 926:	80 e0       	ldi	r24, 0x00	; 0
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	0e 5f       	subi	r16, 0xFE	; 254
 92c:	1f 4f       	sbci	r17, 0xFF	; 255
 92e:	a3 01       	movw	r20, r6
 930:	0e 94 8c 05 	call	0xb18	; 0xb18 <__ultoa_invert>
 934:	88 2e       	mov	r8, r24
 936:	86 18       	sub	r8, r6
 938:	fb 2d       	mov	r31, r11
 93a:	ff 77       	andi	r31, 0x7F	; 127
 93c:	3f 2e       	mov	r3, r31
 93e:	36 fe       	sbrs	r3, 6
 940:	0d c0       	rjmp	.+26     	; 0x95c <__stack+0x5d>
 942:	23 2d       	mov	r18, r3
 944:	2e 7f       	andi	r18, 0xFE	; 254
 946:	a2 2e       	mov	r10, r18
 948:	89 14       	cp	r8, r9
 94a:	58 f4       	brcc	.+22     	; 0x962 <__stack+0x63>
 94c:	34 fe       	sbrs	r3, 4
 94e:	0b c0       	rjmp	.+22     	; 0x966 <__stack+0x67>
 950:	32 fc       	sbrc	r3, 2
 952:	09 c0       	rjmp	.+18     	; 0x966 <__stack+0x67>
 954:	83 2d       	mov	r24, r3
 956:	8e 7e       	andi	r24, 0xEE	; 238
 958:	a8 2e       	mov	r10, r24
 95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x67>
 95c:	b8 2c       	mov	r11, r8
 95e:	a3 2c       	mov	r10, r3
 960:	03 c0       	rjmp	.+6      	; 0x968 <__stack+0x69>
 962:	b8 2c       	mov	r11, r8
 964:	01 c0       	rjmp	.+2      	; 0x968 <__stack+0x69>
 966:	b9 2c       	mov	r11, r9
 968:	a4 fe       	sbrs	r10, 4
 96a:	0f c0       	rjmp	.+30     	; 0x98a <__stack+0x8b>
 96c:	fe 01       	movw	r30, r28
 96e:	e8 0d       	add	r30, r8
 970:	f1 1d       	adc	r31, r1
 972:	80 81       	ld	r24, Z
 974:	80 33       	cpi	r24, 0x30	; 48
 976:	21 f4       	brne	.+8      	; 0x980 <__stack+0x81>
 978:	9a 2d       	mov	r25, r10
 97a:	99 7e       	andi	r25, 0xE9	; 233
 97c:	a9 2e       	mov	r10, r25
 97e:	09 c0       	rjmp	.+18     	; 0x992 <__stack+0x93>
 980:	a2 fe       	sbrs	r10, 2
 982:	06 c0       	rjmp	.+12     	; 0x990 <__stack+0x91>
 984:	b3 94       	inc	r11
 986:	b3 94       	inc	r11
 988:	04 c0       	rjmp	.+8      	; 0x992 <__stack+0x93>
 98a:	8a 2d       	mov	r24, r10
 98c:	86 78       	andi	r24, 0x86	; 134
 98e:	09 f0       	breq	.+2      	; 0x992 <__stack+0x93>
 990:	b3 94       	inc	r11
 992:	a3 fc       	sbrc	r10, 3
 994:	11 c0       	rjmp	.+34     	; 0x9b8 <__stack+0xb9>
 996:	a0 fe       	sbrs	r10, 0
 998:	06 c0       	rjmp	.+12     	; 0x9a6 <__stack+0xa7>
 99a:	b2 14       	cp	r11, r2
 99c:	88 f4       	brcc	.+34     	; 0x9c0 <__stack+0xc1>
 99e:	28 0c       	add	r2, r8
 9a0:	92 2c       	mov	r9, r2
 9a2:	9b 18       	sub	r9, r11
 9a4:	0e c0       	rjmp	.+28     	; 0x9c2 <__stack+0xc3>
 9a6:	b2 14       	cp	r11, r2
 9a8:	60 f4       	brcc	.+24     	; 0x9c2 <__stack+0xc3>
 9aa:	b6 01       	movw	r22, r12
 9ac:	80 e2       	ldi	r24, 0x20	; 32
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 9b4:	b3 94       	inc	r11
 9b6:	f7 cf       	rjmp	.-18     	; 0x9a6 <__stack+0xa7>
 9b8:	b2 14       	cp	r11, r2
 9ba:	18 f4       	brcc	.+6      	; 0x9c2 <__stack+0xc3>
 9bc:	2b 18       	sub	r2, r11
 9be:	02 c0       	rjmp	.+4      	; 0x9c4 <__stack+0xc5>
 9c0:	98 2c       	mov	r9, r8
 9c2:	21 2c       	mov	r2, r1
 9c4:	a4 fe       	sbrs	r10, 4
 9c6:	10 c0       	rjmp	.+32     	; 0x9e8 <__stack+0xe9>
 9c8:	b6 01       	movw	r22, r12
 9ca:	80 e3       	ldi	r24, 0x30	; 48
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 9d2:	a2 fe       	sbrs	r10, 2
 9d4:	17 c0       	rjmp	.+46     	; 0xa04 <__stack+0x105>
 9d6:	a1 fc       	sbrc	r10, 1
 9d8:	03 c0       	rjmp	.+6      	; 0x9e0 <__stack+0xe1>
 9da:	88 e7       	ldi	r24, 0x78	; 120
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	02 c0       	rjmp	.+4      	; 0x9e4 <__stack+0xe5>
 9e0:	88 e5       	ldi	r24, 0x58	; 88
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	b6 01       	movw	r22, r12
 9e6:	0c c0       	rjmp	.+24     	; 0xa00 <__stack+0x101>
 9e8:	8a 2d       	mov	r24, r10
 9ea:	86 78       	andi	r24, 0x86	; 134
 9ec:	59 f0       	breq	.+22     	; 0xa04 <__stack+0x105>
 9ee:	a1 fe       	sbrs	r10, 1
 9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <__stack+0xf7>
 9f2:	8b e2       	ldi	r24, 0x2B	; 43
 9f4:	01 c0       	rjmp	.+2      	; 0x9f8 <__stack+0xf9>
 9f6:	80 e2       	ldi	r24, 0x20	; 32
 9f8:	a7 fc       	sbrc	r10, 7
 9fa:	8d e2       	ldi	r24, 0x2D	; 45
 9fc:	b6 01       	movw	r22, r12
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 a04:	89 14       	cp	r8, r9
 a06:	38 f4       	brcc	.+14     	; 0xa16 <__stack+0x117>
 a08:	b6 01       	movw	r22, r12
 a0a:	80 e3       	ldi	r24, 0x30	; 48
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 a12:	9a 94       	dec	r9
 a14:	f7 cf       	rjmp	.-18     	; 0xa04 <__stack+0x105>
 a16:	8a 94       	dec	r8
 a18:	f3 01       	movw	r30, r6
 a1a:	e8 0d       	add	r30, r8
 a1c:	f1 1d       	adc	r31, r1
 a1e:	80 81       	ld	r24, Z
 a20:	b6 01       	movw	r22, r12
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 a28:	81 10       	cpse	r8, r1
 a2a:	f5 cf       	rjmp	.-22     	; 0xa16 <__stack+0x117>
 a2c:	22 20       	and	r2, r2
 a2e:	09 f4       	brne	.+2      	; 0xa32 <__stack+0x133>
 a30:	42 ce       	rjmp	.-892    	; 0x6b6 <vfprintf+0x24>
 a32:	b6 01       	movw	r22, r12
 a34:	80 e2       	ldi	r24, 0x20	; 32
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 a3c:	2a 94       	dec	r2
 a3e:	f6 cf       	rjmp	.-20     	; 0xa2c <__stack+0x12d>
 a40:	f6 01       	movw	r30, r12
 a42:	86 81       	ldd	r24, Z+6	; 0x06
 a44:	97 81       	ldd	r25, Z+7	; 0x07
 a46:	02 c0       	rjmp	.+4      	; 0xa4c <__stack+0x14d>
 a48:	8f ef       	ldi	r24, 0xFF	; 255
 a4a:	9f ef       	ldi	r25, 0xFF	; 255
 a4c:	2b 96       	adiw	r28, 0x0b	; 11
 a4e:	e2 e1       	ldi	r30, 0x12	; 18
 a50:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__epilogue_restores__>

00000a54 <strnlen_P>:
 a54:	fc 01       	movw	r30, r24
 a56:	05 90       	lpm	r0, Z+
 a58:	61 50       	subi	r22, 0x01	; 1
 a5a:	70 40       	sbci	r23, 0x00	; 0
 a5c:	01 10       	cpse	r0, r1
 a5e:	d8 f7       	brcc	.-10     	; 0xa56 <strnlen_P+0x2>
 a60:	80 95       	com	r24
 a62:	90 95       	com	r25
 a64:	8e 0f       	add	r24, r30
 a66:	9f 1f       	adc	r25, r31
 a68:	08 95       	ret

00000a6a <strnlen>:
 a6a:	fc 01       	movw	r30, r24
 a6c:	61 50       	subi	r22, 0x01	; 1
 a6e:	70 40       	sbci	r23, 0x00	; 0
 a70:	01 90       	ld	r0, Z+
 a72:	01 10       	cpse	r0, r1
 a74:	d8 f7       	brcc	.-10     	; 0xa6c <strnlen+0x2>
 a76:	80 95       	com	r24
 a78:	90 95       	com	r25
 a7a:	8e 0f       	add	r24, r30
 a7c:	9f 1f       	adc	r25, r31
 a7e:	08 95       	ret

00000a80 <strrev>:
 a80:	dc 01       	movw	r26, r24
 a82:	fc 01       	movw	r30, r24
 a84:	67 2f       	mov	r22, r23
 a86:	71 91       	ld	r23, Z+
 a88:	77 23       	and	r23, r23
 a8a:	e1 f7       	brne	.-8      	; 0xa84 <strrev+0x4>
 a8c:	32 97       	sbiw	r30, 0x02	; 2
 a8e:	04 c0       	rjmp	.+8      	; 0xa98 <strrev+0x18>
 a90:	7c 91       	ld	r23, X
 a92:	6d 93       	st	X+, r22
 a94:	70 83       	st	Z, r23
 a96:	62 91       	ld	r22, -Z
 a98:	ae 17       	cp	r26, r30
 a9a:	bf 07       	cpc	r27, r31
 a9c:	c8 f3       	brcs	.-14     	; 0xa90 <strrev+0x10>
 a9e:	08 95       	ret

00000aa0 <fputc>:
 aa0:	0f 93       	push	r16
 aa2:	1f 93       	push	r17
 aa4:	cf 93       	push	r28
 aa6:	df 93       	push	r29
 aa8:	fb 01       	movw	r30, r22
 aaa:	23 81       	ldd	r18, Z+3	; 0x03
 aac:	21 fd       	sbrc	r18, 1
 aae:	03 c0       	rjmp	.+6      	; 0xab6 <fputc+0x16>
 ab0:	8f ef       	ldi	r24, 0xFF	; 255
 ab2:	9f ef       	ldi	r25, 0xFF	; 255
 ab4:	2c c0       	rjmp	.+88     	; 0xb0e <fputc+0x6e>
 ab6:	22 ff       	sbrs	r18, 2
 ab8:	16 c0       	rjmp	.+44     	; 0xae6 <fputc+0x46>
 aba:	46 81       	ldd	r20, Z+6	; 0x06
 abc:	57 81       	ldd	r21, Z+7	; 0x07
 abe:	24 81       	ldd	r18, Z+4	; 0x04
 ac0:	35 81       	ldd	r19, Z+5	; 0x05
 ac2:	42 17       	cp	r20, r18
 ac4:	53 07       	cpc	r21, r19
 ac6:	44 f4       	brge	.+16     	; 0xad8 <fputc+0x38>
 ac8:	a0 81       	ld	r26, Z
 aca:	b1 81       	ldd	r27, Z+1	; 0x01
 acc:	9d 01       	movw	r18, r26
 ace:	2f 5f       	subi	r18, 0xFF	; 255
 ad0:	3f 4f       	sbci	r19, 0xFF	; 255
 ad2:	31 83       	std	Z+1, r19	; 0x01
 ad4:	20 83       	st	Z, r18
 ad6:	8c 93       	st	X, r24
 ad8:	26 81       	ldd	r18, Z+6	; 0x06
 ada:	37 81       	ldd	r19, Z+7	; 0x07
 adc:	2f 5f       	subi	r18, 0xFF	; 255
 ade:	3f 4f       	sbci	r19, 0xFF	; 255
 ae0:	37 83       	std	Z+7, r19	; 0x07
 ae2:	26 83       	std	Z+6, r18	; 0x06
 ae4:	14 c0       	rjmp	.+40     	; 0xb0e <fputc+0x6e>
 ae6:	8b 01       	movw	r16, r22
 ae8:	ec 01       	movw	r28, r24
 aea:	fb 01       	movw	r30, r22
 aec:	00 84       	ldd	r0, Z+8	; 0x08
 aee:	f1 85       	ldd	r31, Z+9	; 0x09
 af0:	e0 2d       	mov	r30, r0
 af2:	09 95       	icall
 af4:	89 2b       	or	r24, r25
 af6:	e1 f6       	brne	.-72     	; 0xab0 <fputc+0x10>
 af8:	d8 01       	movw	r26, r16
 afa:	16 96       	adiw	r26, 0x06	; 6
 afc:	8d 91       	ld	r24, X+
 afe:	9c 91       	ld	r25, X
 b00:	17 97       	sbiw	r26, 0x07	; 7
 b02:	01 96       	adiw	r24, 0x01	; 1
 b04:	17 96       	adiw	r26, 0x07	; 7
 b06:	9c 93       	st	X, r25
 b08:	8e 93       	st	-X, r24
 b0a:	16 97       	sbiw	r26, 0x06	; 6
 b0c:	ce 01       	movw	r24, r28
 b0e:	df 91       	pop	r29
 b10:	cf 91       	pop	r28
 b12:	1f 91       	pop	r17
 b14:	0f 91       	pop	r16
 b16:	08 95       	ret

00000b18 <__ultoa_invert>:
 b18:	fa 01       	movw	r30, r20
 b1a:	aa 27       	eor	r26, r26
 b1c:	28 30       	cpi	r18, 0x08	; 8
 b1e:	51 f1       	breq	.+84     	; 0xb74 <__ultoa_invert+0x5c>
 b20:	20 31       	cpi	r18, 0x10	; 16
 b22:	81 f1       	breq	.+96     	; 0xb84 <__ultoa_invert+0x6c>
 b24:	e8 94       	clt
 b26:	6f 93       	push	r22
 b28:	6e 7f       	andi	r22, 0xFE	; 254
 b2a:	6e 5f       	subi	r22, 0xFE	; 254
 b2c:	7f 4f       	sbci	r23, 0xFF	; 255
 b2e:	8f 4f       	sbci	r24, 0xFF	; 255
 b30:	9f 4f       	sbci	r25, 0xFF	; 255
 b32:	af 4f       	sbci	r26, 0xFF	; 255
 b34:	b1 e0       	ldi	r27, 0x01	; 1
 b36:	3e d0       	rcall	.+124    	; 0xbb4 <__ultoa_invert+0x9c>
 b38:	b4 e0       	ldi	r27, 0x04	; 4
 b3a:	3c d0       	rcall	.+120    	; 0xbb4 <__ultoa_invert+0x9c>
 b3c:	67 0f       	add	r22, r23
 b3e:	78 1f       	adc	r23, r24
 b40:	89 1f       	adc	r24, r25
 b42:	9a 1f       	adc	r25, r26
 b44:	a1 1d       	adc	r26, r1
 b46:	68 0f       	add	r22, r24
 b48:	79 1f       	adc	r23, r25
 b4a:	8a 1f       	adc	r24, r26
 b4c:	91 1d       	adc	r25, r1
 b4e:	a1 1d       	adc	r26, r1
 b50:	6a 0f       	add	r22, r26
 b52:	71 1d       	adc	r23, r1
 b54:	81 1d       	adc	r24, r1
 b56:	91 1d       	adc	r25, r1
 b58:	a1 1d       	adc	r26, r1
 b5a:	20 d0       	rcall	.+64     	; 0xb9c <__ultoa_invert+0x84>
 b5c:	09 f4       	brne	.+2      	; 0xb60 <__ultoa_invert+0x48>
 b5e:	68 94       	set
 b60:	3f 91       	pop	r19
 b62:	2a e0       	ldi	r18, 0x0A	; 10
 b64:	26 9f       	mul	r18, r22
 b66:	11 24       	eor	r1, r1
 b68:	30 19       	sub	r19, r0
 b6a:	30 5d       	subi	r19, 0xD0	; 208
 b6c:	31 93       	st	Z+, r19
 b6e:	de f6       	brtc	.-74     	; 0xb26 <__ultoa_invert+0xe>
 b70:	cf 01       	movw	r24, r30
 b72:	08 95       	ret
 b74:	46 2f       	mov	r20, r22
 b76:	47 70       	andi	r20, 0x07	; 7
 b78:	40 5d       	subi	r20, 0xD0	; 208
 b7a:	41 93       	st	Z+, r20
 b7c:	b3 e0       	ldi	r27, 0x03	; 3
 b7e:	0f d0       	rcall	.+30     	; 0xb9e <__ultoa_invert+0x86>
 b80:	c9 f7       	brne	.-14     	; 0xb74 <__ultoa_invert+0x5c>
 b82:	f6 cf       	rjmp	.-20     	; 0xb70 <__ultoa_invert+0x58>
 b84:	46 2f       	mov	r20, r22
 b86:	4f 70       	andi	r20, 0x0F	; 15
 b88:	40 5d       	subi	r20, 0xD0	; 208
 b8a:	4a 33       	cpi	r20, 0x3A	; 58
 b8c:	18 f0       	brcs	.+6      	; 0xb94 <__ultoa_invert+0x7c>
 b8e:	49 5d       	subi	r20, 0xD9	; 217
 b90:	31 fd       	sbrc	r19, 1
 b92:	40 52       	subi	r20, 0x20	; 32
 b94:	41 93       	st	Z+, r20
 b96:	02 d0       	rcall	.+4      	; 0xb9c <__ultoa_invert+0x84>
 b98:	a9 f7       	brne	.-22     	; 0xb84 <__ultoa_invert+0x6c>
 b9a:	ea cf       	rjmp	.-44     	; 0xb70 <__ultoa_invert+0x58>
 b9c:	b4 e0       	ldi	r27, 0x04	; 4
 b9e:	a6 95       	lsr	r26
 ba0:	97 95       	ror	r25
 ba2:	87 95       	ror	r24
 ba4:	77 95       	ror	r23
 ba6:	67 95       	ror	r22
 ba8:	ba 95       	dec	r27
 baa:	c9 f7       	brne	.-14     	; 0xb9e <__ultoa_invert+0x86>
 bac:	00 97       	sbiw	r24, 0x00	; 0
 bae:	61 05       	cpc	r22, r1
 bb0:	71 05       	cpc	r23, r1
 bb2:	08 95       	ret
 bb4:	9b 01       	movw	r18, r22
 bb6:	ac 01       	movw	r20, r24
 bb8:	0a 2e       	mov	r0, r26
 bba:	06 94       	lsr	r0
 bbc:	57 95       	ror	r21
 bbe:	47 95       	ror	r20
 bc0:	37 95       	ror	r19
 bc2:	27 95       	ror	r18
 bc4:	ba 95       	dec	r27
 bc6:	c9 f7       	brne	.-14     	; 0xbba <__ultoa_invert+0xa2>
 bc8:	62 0f       	add	r22, r18
 bca:	73 1f       	adc	r23, r19
 bcc:	84 1f       	adc	r24, r20
 bce:	95 1f       	adc	r25, r21
 bd0:	a0 1d       	adc	r26, r0
 bd2:	08 95       	ret

00000bd4 <__prologue_saves__>:
 bd4:	2f 92       	push	r2
 bd6:	3f 92       	push	r3
 bd8:	4f 92       	push	r4
 bda:	5f 92       	push	r5
 bdc:	6f 92       	push	r6
 bde:	7f 92       	push	r7
 be0:	8f 92       	push	r8
 be2:	9f 92       	push	r9
 be4:	af 92       	push	r10
 be6:	bf 92       	push	r11
 be8:	cf 92       	push	r12
 bea:	df 92       	push	r13
 bec:	ef 92       	push	r14
 bee:	ff 92       	push	r15
 bf0:	0f 93       	push	r16
 bf2:	1f 93       	push	r17
 bf4:	cf 93       	push	r28
 bf6:	df 93       	push	r29
 bf8:	cd b7       	in	r28, 0x3d	; 61
 bfa:	de b7       	in	r29, 0x3e	; 62
 bfc:	ca 1b       	sub	r28, r26
 bfe:	db 0b       	sbc	r29, r27
 c00:	0f b6       	in	r0, 0x3f	; 63
 c02:	f8 94       	cli
 c04:	de bf       	out	0x3e, r29	; 62
 c06:	0f be       	out	0x3f, r0	; 63
 c08:	cd bf       	out	0x3d, r28	; 61
 c0a:	09 94       	ijmp

00000c0c <__epilogue_restores__>:
 c0c:	2a 88       	ldd	r2, Y+18	; 0x12
 c0e:	39 88       	ldd	r3, Y+17	; 0x11
 c10:	48 88       	ldd	r4, Y+16	; 0x10
 c12:	5f 84       	ldd	r5, Y+15	; 0x0f
 c14:	6e 84       	ldd	r6, Y+14	; 0x0e
 c16:	7d 84       	ldd	r7, Y+13	; 0x0d
 c18:	8c 84       	ldd	r8, Y+12	; 0x0c
 c1a:	9b 84       	ldd	r9, Y+11	; 0x0b
 c1c:	aa 84       	ldd	r10, Y+10	; 0x0a
 c1e:	b9 84       	ldd	r11, Y+9	; 0x09
 c20:	c8 84       	ldd	r12, Y+8	; 0x08
 c22:	df 80       	ldd	r13, Y+7	; 0x07
 c24:	ee 80       	ldd	r14, Y+6	; 0x06
 c26:	fd 80       	ldd	r15, Y+5	; 0x05
 c28:	0c 81       	ldd	r16, Y+4	; 0x04
 c2a:	1b 81       	ldd	r17, Y+3	; 0x03
 c2c:	aa 81       	ldd	r26, Y+2	; 0x02
 c2e:	b9 81       	ldd	r27, Y+1	; 0x01
 c30:	ce 0f       	add	r28, r30
 c32:	d1 1d       	adc	r29, r1
 c34:	0f b6       	in	r0, 0x3f	; 63
 c36:	f8 94       	cli
 c38:	de bf       	out	0x3e, r29	; 62
 c3a:	0f be       	out	0x3f, r0	; 63
 c3c:	cd bf       	out	0x3d, r28	; 61
 c3e:	ed 01       	movw	r28, r26
 c40:	08 95       	ret

00000c42 <_exit>:
 c42:	f8 94       	cli

00000c44 <__stop_program>:
 c44:	ff cf       	rjmp	.-2      	; 0xc44 <__stop_program>
