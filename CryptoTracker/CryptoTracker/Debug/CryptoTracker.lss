
CryptoTracker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00000470  000004e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000470  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000560  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010a3  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000084d  00000000  00000000  000016ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005c1  00000000  00000000  00001ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  000024bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000502  00000000  00000000  000025dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000835  00000000  00000000  00002ade  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00003313  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 34       	cpi	r26, 0x4C	; 76
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 34 01 	call	0x268	; 0x268 <main>
  8e:	0c 94 36 02 	jmp	0x46c	; 0x46c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_write>:
// function: lcd_write
// purpose: send a byte nibble by nibble to the LCD
/////////////////////////////////////////////////
void lcd_write(uint8_t theByte)
{
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
  96:	9b b1       	in	r25, 0x0b	; 11
  98:	9f 77       	andi	r25, 0x7F	; 127
  9a:	9b b9       	out	0x0b, r25	; 11
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
  9c:	88 23       	and	r24, r24
  9e:	1c f4       	brge	.+6      	; 0xa6 <lcd_write+0x10>
  a0:	9b b1       	in	r25, 0x0b	; 11
  a2:	90 68       	ori	r25, 0x80	; 128
  a4:	9b b9       	out	0x0b, r25	; 11

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
  a6:	9b b1       	in	r25, 0x0b	; 11
  a8:	9f 7b       	andi	r25, 0xBF	; 191
  aa:	9b b9       	out	0x0b, r25	; 11
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
  ac:	86 ff       	sbrs	r24, 6
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <lcd_write+0x20>
  b0:	9b b1       	in	r25, 0x0b	; 11
  b2:	90 64       	ori	r25, 0x40	; 64
  b4:	9b b9       	out	0x0b, r25	; 11

    lcd_D5_port &= ~(1<<lcd_D5_bit);
  b6:	9b b1       	in	r25, 0x0b	; 11
  b8:	9f 7d       	andi	r25, 0xDF	; 223
  ba:	9b b9       	out	0x0b, r25	; 11
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
  bc:	85 ff       	sbrs	r24, 5
  be:	03 c0       	rjmp	.+6      	; 0xc6 <lcd_write+0x30>
  c0:	9b b1       	in	r25, 0x0b	; 11
  c2:	90 62       	ori	r25, 0x20	; 32
  c4:	9b b9       	out	0x0b, r25	; 11

    lcd_D4_port &= ~(1<<lcd_D4_bit);
  c6:	9b b1       	in	r25, 0x0b	; 11
  c8:	9f 7e       	andi	r25, 0xEF	; 239
  ca:	9b b9       	out	0x0b, r25	; 11
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
  cc:	84 ff       	sbrs	r24, 4
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <lcd_write+0x40>
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	80 61       	ori	r24, 0x10	; 16
  d4:	8b b9       	out	0x0b, r24	; 11

    lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
  d6:	85 b1       	in	r24, 0x05	; 5
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	85 e0       	ldi	r24, 0x05	; 5
  de:	8a 95       	dec	r24
  e0:	f1 f7       	brne	.-4      	; 0xde <lcd_write+0x48>
  e2:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	8d 7f       	andi	r24, 0xFD	; 253
  e8:	85 b9       	out	0x05, r24	; 5
  ea:	85 e0       	ldi	r24, 0x05	; 5
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_write+0x56>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <lcd_write_char>:
// function: lcd_write_char
// purpose: send a byte nibble by nibble as
// a character
/////////////////////////////////////////////////
void lcd_write_char(uint8_t theData)
{
  f4:	cf 93       	push	r28
  f6:	c8 2f       	mov	r28, r24
    lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	85 b9       	out	0x05, r24	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	8d 7f       	andi	r24, 0xFD	; 253
 102:	85 b9       	out	0x05, r24	; 5
    lcd_write(theData);                           // write the upper 4-bits of the data
 104:	8c 2f       	mov	r24, r28
 106:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
    lcd_write(theData << 4);                      // write the lower 4-bits of the data
 10a:	8c 2f       	mov	r24, r28
 10c:	82 95       	swap	r24
 10e:	80 7f       	andi	r24, 0xF0	; 240
 110:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
}
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <lcd_write_str>:
// function: lcd_write_str
// purpose: sends a string to the LCD to be 
// displayed
/////////////////////////////////////////////////
void lcd_write_str(uint8_t theString[])
{
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	00 d0       	rcall	.+0      	; 0x122 <lcd_write_str+0xa>
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // character counter*/
 128:	1a 82       	std	Y+2, r1	; 0x02
 12a:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
 12c:	12 c0       	rjmp	.+36     	; 0x152 <lcd_write_str+0x3a>
    {
        lcd_write_char(theString[i]);
 12e:	e9 81       	ldd	r30, Y+1	; 0x01
 130:	fa 81       	ldd	r31, Y+2	; 0x02
 132:	e0 0f       	add	r30, r16
 134:	f1 1f       	adc	r31, r17
 136:	80 81       	ld	r24, Z
 138:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_write_char>
        i++;
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	9a 81       	ldd	r25, Y+2	; 0x02
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	9a 83       	std	Y+2, r25	; 0x02
 144:	89 83       	std	Y+1, r24	; 0x01
 146:	8f e3       	ldi	r24, 0x3F	; 63
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_write_str+0x32>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <lcd_write_str+0x38>
 150:	00 00       	nop
// displayed
/////////////////////////////////////////////////
void lcd_write_str(uint8_t theString[])
{
    volatile int i = 0;                             // character counter*/
    while (theString[i] != 0)
 152:	e9 81       	ldd	r30, Y+1	; 0x01
 154:	fa 81       	ldd	r31, Y+2	; 0x02
 156:	e0 0f       	add	r30, r16
 158:	f1 1f       	adc	r31, r17
 15a:	80 81       	ld	r24, Z
 15c:	81 11       	cpse	r24, r1
 15e:	e7 cf       	rjmp	.-50     	; 0x12e <lcd_write_str+0x16>
    {
        lcd_write_char(theString[i]);
        i++;
        _delay_us(80);                              // 40 uS delay (min)
    }
}
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	08 95       	ret

0000016e <lcd_write_instruction>:
// function: lcd_write_instruction
// purpose: send a byte nibble by nibble to
// the LCD as an instruction
/////////////////////////////////////////////////
void lcd_write_instruction(uint8_t theInstruction)
{
 16e:	cf 93       	push	r28
 170:	c8 2f       	mov	r28, r24
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
 172:	85 b1       	in	r24, 0x05	; 5
 174:	8e 7f       	andi	r24, 0xFE	; 254
 176:	85 b9       	out	0x05, r24	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
 178:	85 b1       	in	r24, 0x05	; 5
 17a:	8d 7f       	andi	r24, 0xFD	; 253
 17c:	85 b9       	out	0x05, r24	; 5
    lcd_write(theInstruction);                    // write the upper 4-bits of the data
 17e:	8c 2f       	mov	r24, r28
 180:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
    lcd_write(theInstruction << 4);               // write the lower 4-bits of the data
 184:	8c 2f       	mov	r24, r28
 186:	82 95       	swap	r24
 188:	80 7f       	andi	r24, 0xF0	; 240
 18a:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
}
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <move_to_line_2>:
/////////////////////////////////////////////////
// Function: move_to_line_2
// Purpose: moves cursor to line 2
/////////////////////////////////////////////////
void move_to_line_2(void){
  lcd_write_instruction(lcd_SetCursor | lcd_LineTwo);
 192:	80 ec       	ldi	r24, 0xC0	; 192
 194:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_write_instruction>
 198:	8f e3       	ldi	r24, 0x3F	; 63
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <move_to_line_2+0xa>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <move_to_line_2+0x10>
 1a2:	00 00       	nop
 1a4:	08 95       	ret

000001a6 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	81 ee       	ldi	r24, 0xE1	; 225
 1aa:	94 e0       	ldi	r25, 0x04	; 4
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <lcd_init+0x6>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lcd_init+0x10>
 1b6:	00 00       	nop
  // delay for a bit so hardware can do it's thing
    _delay_ms(100);    
                               
    // note we start in 8 bit mode, so we gotta change that
    // Set up the RS and E lines for the 'lcd_write' subroutine.
    lcd_RS_port &= ~(1<<lcd_RS_bit);
 1b8:	85 b1       	in	r24, 0x05	; 5
 1ba:	8e 7f       	andi	r24, 0xFE	; 254
 1bc:	85 b9       	out	0x05, r24	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  
 1be:	85 b1       	in	r24, 0x05	; 5
 1c0:	8d 7f       	andi	r24, 0xFD	; 253
 1c2:	85 b9       	out	0x05, r24	; 5

    // Setup the LCD
    lcd_write(lcd_reset); // first part of reset sequence
 1c4:	80 e3       	ldi	r24, 0x30	; 48
 1c6:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
 1ca:	8f e3       	ldi	r24, 0x3F	; 63
 1cc:	9c e9       	ldi	r25, 0x9C	; 156
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_init+0x28>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <lcd_init+0x2e>
 1d4:	00 00       	nop
    _delay_ms(10);

    lcd_write(lcd_reset); // second part of reset sequence
 1d6:	80 e3       	ldi	r24, 0x30	; 48
 1d8:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1dc:	8f e1       	ldi	r24, 0x1F	; 31
 1de:	93 e0       	ldi	r25, 0x03	; 3
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_init+0x3a>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd_init+0x40>
 1e6:	00 00       	nop
    _delay_us(200);

    lcd_write(lcd_reset); // third part of reset sequence
 1e8:	80 e3       	ldi	r24, 0x30	; 48
 1ea:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
 1ee:	8f e1       	ldi	r24, 0x1F	; 31
 1f0:	93 e0       	ldi	r25, 0x03	; 3
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_init+0x4c>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <lcd_init+0x52>
 1f8:	00 00       	nop
    _delay_us(200); 
 
    lcd_write(lcd_setTo4Bit); // set 4-bit mode
 1fa:	88 e2       	ldi	r24, 0x28	; 40
 1fc:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
 200:	8f e3       	ldi	r24, 0x3F	; 63
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <lcd_init+0x5e>
 208:	00 c0       	rjmp	.+0      	; 0x20a <lcd_init+0x64>
 20a:	00 00       	nop
    _delay_us(80);

    // Function Set instruction
    lcd_write_instruction(lcd_setTo4Bit); 
 20c:	88 e2       	ldi	r24, 0x28	; 40
 20e:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_write_instruction>
 212:	8f e3       	ldi	r24, 0x3F	; 63
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <lcd_init+0x70>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_init+0x76>
 21c:	00 00       	nop
    _delay_us(80);  

    // Display On
    lcd_write_instruction(lcd_DisplayOff);        
 21e:	88 e0       	ldi	r24, 0x08	; 8
 220:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_write_instruction>
 224:	8f e3       	ldi	r24, 0x3F	; 63
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_init+0x82>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <lcd_init+0x88>
 22e:	00 00       	nop
    _delay_us(80); 

    // Clear Display
    lcd_write_instruction(lcd_Clear);            
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	8f e7       	ldi	r24, 0x7F	; 127
 238:	9e e3       	ldi	r25, 0x3E	; 62
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_init+0x94>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_init+0x9a>
 240:	00 00       	nop
    _delay_ms(4);                                  

    // Entry Mode Set instruction
    lcd_write_instruction(lcd_EntryMode);  
 242:	86 e0       	ldi	r24, 0x06	; 6
 244:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	8f e3       	ldi	r24, 0x3F	; 63
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_init+0xa6>
 250:	00 c0       	rjmp	.+0      	; 0x252 <lcd_init+0xac>
 252:	00 00       	nop
    _delay_us(80);                                  
 
    // Display On/Off Control instruction
    lcd_write_instruction(lcd_DisplayOn);         
 254:	8c e0       	ldi	r24, 0x0C	; 12
 256:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_write_instruction>
 25a:	8f e3       	ldi	r24, 0x3F	; 63
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <lcd_init+0xb8>
 262:	00 c0       	rjmp	.+0      	; 0x264 <lcd_init+0xbe>
 264:	00 00       	nop
 266:	08 95       	ret

00000268 <main>:
/////////////////////////////////////////////////
// Function: move_to_line_2
// Purpose: moves cursor to line 2
/////////////////////////////////////////////////
int main(void)
{	
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
 270:	e2 97       	sbiw	r28, 0x32	; 50
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	f8 94       	cli
 276:	de bf       	out	0x3e, r29	; 62
 278:	0f be       	out	0x3f, r0	; 63
 27a:	cd bf       	out	0x3d, r28	; 61
	int state = Display_Cryptos;
	
	// storage variables
	int alarmPercent = 10; // default alarm to 10 percent change
	int currentCrypto = 1; // 0 denotes bitcoin, 1 denotes eth. Add more if more supported cryptos are added
	char cryptos[2][10] = { "Bitcoin",		// supported crypto names. Index = current crypto int
 27c:	84 e1       	ldi	r24, 0x14	; 20
 27e:	e0 e0       	ldi	r30, 0x00	; 0
 280:	f1 e0       	ldi	r31, 0x01	; 1
 282:	de 01       	movw	r26, r28
 284:	11 96       	adiw	r26, 0x01	; 1
 286:	01 90       	ld	r0, Z+
 288:	0d 92       	st	X+, r0
 28a:	8a 95       	dec	r24
 28c:	e1 f7       	brne	.-8      	; 0x286 <main+0x1e>
							"Ethereum"};
	char prices[2][10] = {"54802.80", "3286.23"}; 
 28e:	84 e1       	ldi	r24, 0x14	; 20
 290:	e4 e1       	ldi	r30, 0x14	; 20
 292:	f1 e0       	ldi	r31, 0x01	; 1
 294:	de 01       	movw	r26, r28
 296:	55 96       	adiw	r26, 0x15	; 21
 298:	01 90       	ld	r0, Z+
 29a:	0d 92       	st	X+, r0
 29c:	8a 95       	dec	r24
 29e:	e1 f7       	brne	.-8      	; 0x298 <main+0x30>
	
	// configure the data lines for output to LCD
    lcd_D7_ddr |= (1<<lcd_D7_bit);
 2a0:	8a b1       	in	r24, 0x0a	; 10
 2a2:	80 68       	ori	r24, 0x80	; 128
 2a4:	8a b9       	out	0x0a, r24	; 10
    lcd_D6_ddr |= (1<<lcd_D6_bit);
 2a6:	8a b1       	in	r24, 0x0a	; 10
 2a8:	80 64       	ori	r24, 0x40	; 64
 2aa:	8a b9       	out	0x0a, r24	; 10
    lcd_D5_ddr |= (1<<lcd_D5_bit);
 2ac:	8a b1       	in	r24, 0x0a	; 10
 2ae:	80 62       	ori	r24, 0x20	; 32
 2b0:	8a b9       	out	0x0a, r24	; 10
    lcd_D4_ddr |= (1<<lcd_D4_bit);
 2b2:	8a b1       	in	r24, 0x0a	; 10
 2b4:	80 61       	ori	r24, 0x10	; 16
 2b6:	8a b9       	out	0x0a, r24	; 10

	// configure the data lines for controlling the LCD
    lcd_E_ddr |= (1<<lcd_E_bit);        // Enable
 2b8:	84 b1       	in	r24, 0x04	; 4
 2ba:	82 60       	ori	r24, 0x02	; 2
 2bc:	84 b9       	out	0x04, r24	; 4
    lcd_RS_ddr |= (1<<lcd_RS_bit);    // Register Select
 2be:	84 b1       	in	r24, 0x04	; 4
 2c0:	81 60       	ori	r24, 0x01	; 1
 2c2:	84 b9       	out	0x04, r24	; 4

    lcd_init();
 2c4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_init>

	// Type welcome message
    lcd_write_str("Welcome to");
 2c8:	88 e2       	ldi	r24, 0x28	; 40
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_write_str>
    move_to_line_2();
 2d0:	0e 94 c9 00 	call	0x192	; 0x192 <move_to_line_2>
    lcd_write_str("CryptoTicker");
 2d4:	83 e3       	ldi	r24, 0x33	; 51
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_write_str>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2dc:	2f ef       	ldi	r18, 0xFF	; 255
 2de:	33 e2       	ldi	r19, 0x23	; 35
 2e0:	84 ef       	ldi	r24, 0xF4	; 244
 2e2:	21 50       	subi	r18, 0x01	; 1
 2e4:	30 40       	sbci	r19, 0x00	; 0
 2e6:	80 40       	sbci	r24, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <main+0x7a>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <main+0x84>
 2ec:	00 00       	nop
	
	// display welcome message for 5 seconds
	// and then clear the screen
	_delay_ms(5000);
	lcd_write_instruction(lcd_Clear);
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_write_instruction>
 2f4:	9f ef       	ldi	r25, 0xFF	; 255
 2f6:	27 ee       	ldi	r18, 0xE7	; 231
 2f8:	33 e0       	ldi	r19, 0x03	; 3
 2fa:	91 50       	subi	r25, 0x01	; 1
 2fc:	20 40       	sbci	r18, 0x00	; 0
 2fe:	30 40       	sbci	r19, 0x00	; 0
 300:	e1 f7       	brne	.-8      	; 0x2fa <main+0x92>
 302:	00 c0       	rjmp	.+0      	; 0x304 <main+0x9c>
 304:	00 00       	nop
	_delay_ms(80);
	
	int debug = 0;
 306:	a1 2c       	mov	r10, r1
 308:	b1 2c       	mov	r11, r1
	int Configure_Alarm = 1;
	int state = Display_Cryptos;
	
	// storage variables
	int alarmPercent = 10; // default alarm to 10 percent change
	int currentCrypto = 1; // 0 denotes bitcoin, 1 denotes eth. Add more if more supported cryptos are added
 30a:	cc 24       	eor	r12, r12
 30c:	c3 94       	inc	r12
 30e:	d1 2c       	mov	r13, r1
int main(void)
{	
	// State variable
	int Display_Cryptos = 0;
	int Configure_Alarm = 1;
	int state = Display_Cryptos;
 310:	00 e0       	ldi	r16, 0x00	; 0
 312:	10 e0       	ldi	r17, 0x00	; 0
	_delay_ms(80);
	
	int debug = 0;
    // program loop
    while(1){
		if(state == Display_Cryptos){
 314:	01 15       	cp	r16, r1
 316:	11 05       	cpc	r17, r1
 318:	81 f5       	brne	.+96     	; 0x37a <main+0x112>
			
			lcd_write_str(cryptos[currentCrypto]);
 31a:	76 01       	movw	r14, r12
 31c:	ee 0c       	add	r14, r14
 31e:	ff 1c       	adc	r15, r15
 320:	c6 01       	movw	r24, r12
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	e8 0e       	add	r14, r24
 330:	f9 1e       	adc	r15, r25
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	8c 0f       	add	r24, r28
 338:	9d 1f       	adc	r25, r29
 33a:	8e 0d       	add	r24, r14
 33c:	9f 1d       	adc	r25, r15
 33e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_write_str>
		    move_to_line_2();
 342:	0e 94 c9 00 	call	0x192	; 0x192 <move_to_line_2>
		    lcd_write_str(prices[currentCrypto]);
 346:	85 e1       	ldi	r24, 0x15	; 21
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	8c 0f       	add	r24, r28
 34c:	9d 1f       	adc	r25, r29
 34e:	8e 0d       	add	r24, r14
 350:	9f 1d       	adc	r25, r15
 352:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_write_str>
		            
		    if(currentCrypto == 0)
 356:	cd 28       	or	r12, r13
 358:	49 f4       	brne	.+18     	; 0x36c <main+0x104>
		    {
			    currentCrypto = 1;
				debug = 3;
 35a:	0f 2e       	mov	r0, r31
 35c:	f3 e0       	ldi	r31, 0x03	; 3
 35e:	af 2e       	mov	r10, r31
 360:	b1 2c       	mov	r11, r1
 362:	f0 2d       	mov	r31, r0
		    move_to_line_2();
		    lcd_write_str(prices[currentCrypto]);
		            
		    if(currentCrypto == 0)
		    {
			    currentCrypto = 1;
 364:	cc 24       	eor	r12, r12
 366:	c3 94       	inc	r12
 368:	d1 2c       	mov	r13, r1
 36a:	02 c0       	rjmp	.+4      	; 0x370 <main+0x108>
				debug = 3;
		    }else
		    {
			    currentCrypto = 0;
 36c:	c1 2c       	mov	r12, r1
 36e:	d1 2c       	mov	r13, r1
		    }
			if(debug == 3){
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	a8 16       	cp	r10, r24
 374:	b1 04       	cpc	r11, r1
 376:	21 f5       	brne	.+72     	; 0x3c0 <main+0x158>
 378:	21 c0       	rjmp	.+66     	; 0x3bc <main+0x154>
				state = Configure_Alarm;
			}
		}else if(state == Configure_Alarm){
 37a:	01 30       	cpi	r16, 0x01	; 1
 37c:	11 05       	cpc	r17, r1
 37e:	01 f5       	brne	.+64     	; 0x3c0 <main+0x158>
			lcd_write_str("Set Alarm:");
 380:	80 e4       	ldi	r24, 0x40	; 64
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_write_str>
			move_to_line_2();
 388:	0e 94 c9 00 	call	0x192	; 0x192 <move_to_line_2>
			char snum[10];
			itoa(alarmPercent, snum, 10);
 38c:	4a e0       	ldi	r20, 0x0A	; 10
 38e:	50 e0       	ldi	r21, 0x00	; 0
 390:	be 01       	movw	r22, r28
 392:	67 5d       	subi	r22, 0xD7	; 215
 394:	7f 4f       	sbci	r23, 0xFF	; 255
 396:	8a e0       	ldi	r24, 0x0A	; 10
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <itoa>
			lcd_write_str(snum);
 39e:	ce 01       	movw	r24, r28
 3a0:	89 96       	adiw	r24, 0x29	; 41
 3a2:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_write_str>
 3a6:	9a ea       	ldi	r25, 0xAA	; 170
 3a8:	26 ee       	ldi	r18, 0xE6	; 230
 3aa:	36 e9       	ldi	r19, 0x96	; 150
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	91 50       	subi	r25, 0x01	; 1
 3b0:	20 40       	sbci	r18, 0x00	; 0
 3b2:	30 40       	sbci	r19, 0x00	; 0
 3b4:	80 40       	sbci	r24, 0x00	; 0
 3b6:	d9 f7       	brne	.-10     	; 0x3ae <main+0x146>
 3b8:	00 00       	nop
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <main+0x158>
		    }else
		    {
			    currentCrypto = 0;
		    }
			if(debug == 3){
				state = Configure_Alarm;
 3bc:	01 e0       	ldi	r16, 0x01	; 1
 3be:	10 e0       	ldi	r17, 0x00	; 0
 3c0:	9f ef       	ldi	r25, 0xFF	; 255
 3c2:	23 e2       	ldi	r18, 0x23	; 35
 3c4:	34 ef       	ldi	r19, 0xF4	; 244
 3c6:	91 50       	subi	r25, 0x01	; 1
 3c8:	20 40       	sbci	r18, 0x00	; 0
 3ca:	30 40       	sbci	r19, 0x00	; 0
 3cc:	e1 f7       	brne	.-8      	; 0x3c6 <main+0x15e>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <main+0x168>
 3d0:	00 00       	nop
			lcd_write_str(snum);
			_delay_ms(10000);
		}      
		      
		_delay_ms(5000);
		lcd_write_instruction(lcd_Clear);
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_write_instruction>
 3d8:	8f ef       	ldi	r24, 0xFF	; 255
 3da:	97 ee       	ldi	r25, 0xE7	; 231
 3dc:	23 e0       	ldi	r18, 0x03	; 3
 3de:	81 50       	subi	r24, 0x01	; 1
 3e0:	90 40       	sbci	r25, 0x00	; 0
 3e2:	20 40       	sbci	r18, 0x00	; 0
 3e4:	e1 f7       	brne	.-8      	; 0x3de <main+0x176>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <main+0x180>
 3e8:	00 00       	nop
 3ea:	94 cf       	rjmp	.-216    	; 0x314 <main+0xac>

000003ec <itoa>:
 3ec:	45 32       	cpi	r20, 0x25	; 37
 3ee:	51 05       	cpc	r21, r1
 3f0:	20 f4       	brcc	.+8      	; 0x3fa <itoa+0xe>
 3f2:	42 30       	cpi	r20, 0x02	; 2
 3f4:	10 f0       	brcs	.+4      	; 0x3fa <itoa+0xe>
 3f6:	0c 94 01 02 	jmp	0x402	; 0x402 <__itoa_ncheck>
 3fa:	fb 01       	movw	r30, r22
 3fc:	10 82       	st	Z, r1
 3fe:	cb 01       	movw	r24, r22
 400:	08 95       	ret

00000402 <__itoa_ncheck>:
 402:	bb 27       	eor	r27, r27
 404:	4a 30       	cpi	r20, 0x0A	; 10
 406:	31 f4       	brne	.+12     	; 0x414 <__itoa_ncheck+0x12>
 408:	99 23       	and	r25, r25
 40a:	22 f4       	brpl	.+8      	; 0x414 <__itoa_ncheck+0x12>
 40c:	bd e2       	ldi	r27, 0x2D	; 45
 40e:	90 95       	com	r25
 410:	81 95       	neg	r24
 412:	9f 4f       	sbci	r25, 0xFF	; 255
 414:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__utoa_common>

00000418 <__utoa_ncheck>:
 418:	bb 27       	eor	r27, r27

0000041a <__utoa_common>:
 41a:	fb 01       	movw	r30, r22
 41c:	55 27       	eor	r21, r21
 41e:	aa 27       	eor	r26, r26
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	aa 1f       	adc	r26, r26
 426:	a4 17       	cp	r26, r20
 428:	10 f0       	brcs	.+4      	; 0x42e <__utoa_common+0x14>
 42a:	a4 1b       	sub	r26, r20
 42c:	83 95       	inc	r24
 42e:	50 51       	subi	r21, 0x10	; 16
 430:	b9 f7       	brne	.-18     	; 0x420 <__utoa_common+0x6>
 432:	a0 5d       	subi	r26, 0xD0	; 208
 434:	aa 33       	cpi	r26, 0x3A	; 58
 436:	08 f0       	brcs	.+2      	; 0x43a <__utoa_common+0x20>
 438:	a9 5d       	subi	r26, 0xD9	; 217
 43a:	a1 93       	st	Z+, r26
 43c:	00 97       	sbiw	r24, 0x00	; 0
 43e:	79 f7       	brne	.-34     	; 0x41e <__utoa_common+0x4>
 440:	b1 11       	cpse	r27, r1
 442:	b1 93       	st	Z+, r27
 444:	11 92       	st	Z+, r1
 446:	cb 01       	movw	r24, r22
 448:	0c 94 26 02 	jmp	0x44c	; 0x44c <strrev>

0000044c <strrev>:
 44c:	dc 01       	movw	r26, r24
 44e:	fc 01       	movw	r30, r24
 450:	67 2f       	mov	r22, r23
 452:	71 91       	ld	r23, Z+
 454:	77 23       	and	r23, r23
 456:	e1 f7       	brne	.-8      	; 0x450 <strrev+0x4>
 458:	32 97       	sbiw	r30, 0x02	; 2
 45a:	04 c0       	rjmp	.+8      	; 0x464 <strrev+0x18>
 45c:	7c 91       	ld	r23, X
 45e:	6d 93       	st	X+, r22
 460:	70 83       	st	Z, r23
 462:	62 91       	ld	r22, -Z
 464:	ae 17       	cp	r26, r30
 466:	bf 07       	cpc	r27, r31
 468:	c8 f3       	brcs	.-14     	; 0x45c <strrev+0x10>
 46a:	08 95       	ret

0000046c <_exit>:
 46c:	f8 94       	cli

0000046e <__stop_program>:
 46e:	ff cf       	rjmp	.-2      	; 0x46e <__stop_program>
