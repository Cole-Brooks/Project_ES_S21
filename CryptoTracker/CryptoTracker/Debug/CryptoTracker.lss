
CryptoTracker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000004a8  0000051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fe2  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000832  00000000  00000000  000015ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000573  00000000  00000000  00001e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00002394  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000517  00000000  00000000  000024b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007a9  00000000  00000000  000029cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00003174  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 89 01 	call	0x312	; 0x312 <main>
  8e:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <usart_init>:
// - set frame format 8 data, 2 stop bit
/////////////////////////////////////////////////
void usart_init(void)
{
	// Set baud rate
	UBRR0H = (uint8_t)(UBRR_VALUE>>8);
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)UBRR_VALUE;
  9a:	87 e6       	ldi	r24, 0x67	; 103
  9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
  a0:	e2 ec       	ldi	r30, 0xC2	; 194
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	86 60       	ori	r24, 0x06	; 6
  a8:	80 83       	st	Z, r24
	//enable transmission and reception
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
  aa:	e1 ec       	ldi	r30, 0xC1	; 193
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	88 61       	ori	r24, 0x18	; 24
  b2:	80 83       	st	Z, r24
  b4:	08 95       	ret

000000b6 <usart_rx>:
// purpose: receives data from bluetooth module
/////////////////////////////////////////////////
uint16_t usart_rx(void)
{
	// Wait for byte to be received
	while(!(UCSR0A&(1<<RXC0))){};
  b6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ba:	88 23       	and	r24, r24
  bc:	e4 f7       	brge	.-8      	; 0xb6 <usart_rx>
	// Return received data
	return UDR0;
  be:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	08 95       	ret

000000c6 <get_string>:

/////////////////////////////////////////////////
// function: get_string
// purpose: gets string from bluetooth module
/////////////////////////////////////////////////
const char* get_string(char input_str[]){
  c6:	cf 92       	push	r12
  c8:	df 92       	push	r13
  ca:	ef 92       	push	r14
  cc:	ff 92       	push	r15
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	2a 97       	sbiw	r28, 0x0a	; 10
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	f8 94       	cli
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	cd bf       	out	0x3d, r28	; 61
  e6:	6c 01       	movw	r12, r24
	char buffer[10];
	uint16_t input = usart_rx();
  e8:	0e 94 5b 00 	call	0xb6	; 0xb6 <usart_rx>
	
	int i = 0;
  ec:	00 e0       	ldi	r16, 0x00	; 0
  ee:	10 e0       	ldi	r17, 0x00	; 0
	while (input != '\n'){
  f0:	14 c0       	rjmp	.+40     	; 0x11a <get_string+0x54>
		itoa(input, buffer, 10);
  f2:	4a e0       	ldi	r20, 0x0A	; 10
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	be 01       	movw	r22, r28
  f8:	6f 5f       	subi	r22, 0xFF	; 255
  fa:	7f 4f       	sbci	r23, 0xFF	; 255
  fc:	0e 94 0a 02 	call	0x414	; 0x414 <itoa>
		input_str[i] = atoi(buffer);
 100:	76 01       	movw	r14, r12
 102:	e0 0e       	add	r14, r16
 104:	f1 1e       	adc	r15, r17
 106:	ce 01       	movw	r24, r28
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <atoi>
 10e:	f7 01       	movw	r30, r14
 110:	80 83       	st	Z, r24
		i = i + 1;
 112:	0f 5f       	subi	r16, 0xFF	; 255
 114:	1f 4f       	sbci	r17, 0xFF	; 255
		input = usart_rx();
 116:	0e 94 5b 00 	call	0xb6	; 0xb6 <usart_rx>
const char* get_string(char input_str[]){
	char buffer[10];
	uint16_t input = usart_rx();
	
	int i = 0;
	while (input != '\n'){
 11a:	8a 30       	cpi	r24, 0x0A	; 10
 11c:	91 05       	cpc	r25, r1
 11e:	49 f7       	brne	.-46     	; 0xf2 <get_string+0x2c>
		i = i + 1;
		input = usart_rx();
	}
	
	return input_str;
}
 120:	c6 01       	movw	r24, r12
 122:	2a 96       	adiw	r28, 0x0a	; 10
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	f8 94       	cli
 128:	de bf       	out	0x3e, r29	; 62
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	cd bf       	out	0x3d, r28	; 61
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	ff 90       	pop	r15
 138:	ef 90       	pop	r14
 13a:	df 90       	pop	r13
 13c:	cf 90       	pop	r12
 13e:	08 95       	ret

00000140 <lcd_write>:
// function: lcd_write
// purpose: send a byte nibble by nibble to the LCD
/////////////////////////////////////////////////
void lcd_write(uint8_t theByte)
{
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
 140:	98 b1       	in	r25, 0x08	; 8
 142:	97 7f       	andi	r25, 0xF7	; 247
 144:	98 b9       	out	0x08, r25	; 8
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
 146:	88 23       	and	r24, r24
 148:	1c f4       	brge	.+6      	; 0x150 <lcd_write+0x10>
 14a:	98 b1       	in	r25, 0x08	; 8
 14c:	98 60       	ori	r25, 0x08	; 8
 14e:	98 b9       	out	0x08, r25	; 8

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
 150:	98 b1       	in	r25, 0x08	; 8
 152:	9b 7f       	andi	r25, 0xFB	; 251
 154:	98 b9       	out	0x08, r25	; 8
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
 156:	86 ff       	sbrs	r24, 6
 158:	03 c0       	rjmp	.+6      	; 0x160 <lcd_write+0x20>
 15a:	98 b1       	in	r25, 0x08	; 8
 15c:	94 60       	ori	r25, 0x04	; 4
 15e:	98 b9       	out	0x08, r25	; 8

    lcd_D5_port &= ~(1<<lcd_D5_bit);
 160:	98 b1       	in	r25, 0x08	; 8
 162:	9d 7f       	andi	r25, 0xFD	; 253
 164:	98 b9       	out	0x08, r25	; 8
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
 166:	85 ff       	sbrs	r24, 5
 168:	03 c0       	rjmp	.+6      	; 0x170 <lcd_write+0x30>
 16a:	98 b1       	in	r25, 0x08	; 8
 16c:	92 60       	ori	r25, 0x02	; 2
 16e:	98 b9       	out	0x08, r25	; 8

    lcd_D4_port &= ~(1<<lcd_D4_bit);
 170:	98 b1       	in	r25, 0x08	; 8
 172:	9e 7f       	andi	r25, 0xFE	; 254
 174:	98 b9       	out	0x08, r25	; 8
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
 176:	84 ff       	sbrs	r24, 4
 178:	03 c0       	rjmp	.+6      	; 0x180 <lcd_write+0x40>
 17a:	88 b1       	in	r24, 0x08	; 8
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	88 b9       	out	0x08, r24	; 8

    lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
 180:	85 b1       	in	r24, 0x05	; 5
 182:	88 60       	ori	r24, 0x08	; 8
 184:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	85 e0       	ldi	r24, 0x05	; 5
 188:	8a 95       	dec	r24
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_write+0x48>
 18c:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	87 7f       	andi	r24, 0xF7	; 247
 192:	85 b9       	out	0x05, r24	; 5
 194:	85 e0       	ldi	r24, 0x05	; 5
 196:	8a 95       	dec	r24
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_write+0x56>
 19a:	00 00       	nop
 19c:	08 95       	ret

0000019e <lcd_write_char>:
// function: lcd_write_char
// purpose: send a byte nibble by nibble as
// a character
/////////////////////////////////////////////////
void lcd_write_char(uint8_t theData)
{
 19e:	cf 93       	push	r28
 1a0:	c8 2f       	mov	r28, r24
    lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
 1a2:	85 b1       	in	r24, 0x05	; 5
 1a4:	80 62       	ori	r24, 0x20	; 32
 1a6:	85 b9       	out	0x05, r24	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	87 7f       	andi	r24, 0xF7	; 247
 1ac:	85 b9       	out	0x05, r24	; 5
    lcd_write(theData);                           // write the upper 4-bits of the data
 1ae:	8c 2f       	mov	r24, r28
 1b0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_write>
    lcd_write(theData << 4);                      // write the lower 4-bits of the data
 1b4:	8c 2f       	mov	r24, r28
 1b6:	82 95       	swap	r24
 1b8:	80 7f       	andi	r24, 0xF0	; 240
 1ba:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_write>
}
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <lcd_write_str>:
// function: lcd_write_str
// purpose: sends a string to the LCD to be 
// displayed
/////////////////////////////////////////////////
void lcd_write_str(uint8_t theString[])
{
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <lcd_write_str+0xa>
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 1d0:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // character counter*/
 1d2:	1a 82       	std	Y+2, r1	; 0x02
 1d4:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
 1d6:	12 c0       	rjmp	.+36     	; 0x1fc <lcd_write_str+0x3a>
    {
        lcd_write_char(theString[i]);
 1d8:	e9 81       	ldd	r30, Y+1	; 0x01
 1da:	fa 81       	ldd	r31, Y+2	; 0x02
 1dc:	e0 0f       	add	r30, r16
 1de:	f1 1f       	adc	r31, r17
 1e0:	80 81       	ld	r24, Z
 1e2:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write_char>
        i++;
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
 1e8:	9a 81       	ldd	r25, Y+2	; 0x02
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	9a 83       	std	Y+2, r25	; 0x02
 1ee:	89 83       	std	Y+1, r24	; 0x01
 1f0:	8f e3       	ldi	r24, 0x3F	; 63
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <lcd_write_str+0x32>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <lcd_write_str+0x38>
 1fa:	00 00       	nop
// displayed
/////////////////////////////////////////////////
void lcd_write_str(uint8_t theString[])
{
    volatile int i = 0;                             // character counter*/
    while (theString[i] != 0)
 1fc:	e9 81       	ldd	r30, Y+1	; 0x01
 1fe:	fa 81       	ldd	r31, Y+2	; 0x02
 200:	e0 0f       	add	r30, r16
 202:	f1 1f       	adc	r31, r17
 204:	80 81       	ld	r24, Z
 206:	81 11       	cpse	r24, r1
 208:	e7 cf       	rjmp	.-50     	; 0x1d8 <lcd_write_str+0x16>
    {
        lcd_write_char(theString[i]);
        i++;
        _delay_us(80);                              // 40 uS delay (min)
    }
}
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	08 95       	ret

00000218 <lcd_write_instruction>:
// function: lcd_write_instruction
// purpose: send a byte nibble by nibble to
// the LCD as an instruction
/////////////////////////////////////////////////
void lcd_write_instruction(uint8_t theInstruction)
{
 218:	cf 93       	push	r28
 21a:	c8 2f       	mov	r28, r24
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
 21c:	85 b1       	in	r24, 0x05	; 5
 21e:	8f 7d       	andi	r24, 0xDF	; 223
 220:	85 b9       	out	0x05, r24	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
 222:	85 b1       	in	r24, 0x05	; 5
 224:	87 7f       	andi	r24, 0xF7	; 247
 226:	85 b9       	out	0x05, r24	; 5
    lcd_write(theInstruction);                    // write the upper 4-bits of the data
 228:	8c 2f       	mov	r24, r28
 22a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_write>
    lcd_write(theInstruction << 4);               // write the lower 4-bits of the data
 22e:	8c 2f       	mov	r24, r28
 230:	82 95       	swap	r24
 232:	80 7f       	andi	r24, 0xF0	; 240
 234:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_write>
}
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <move_to_line_2>:
/////////////////////////////////////////////////
// Function: move_to_line_2
// Purpose: moves cursor to line 2
/////////////////////////////////////////////////
void move_to_line_2(void){
  lcd_write_instruction(lcd_SetCursor | lcd_LineTwo);
 23c:	80 ec       	ldi	r24, 0xC0	; 192
 23e:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_write_instruction>
 242:	8f e3       	ldi	r24, 0x3F	; 63
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <move_to_line_2+0xa>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <move_to_line_2+0x10>
 24c:	00 00       	nop
 24e:	08 95       	ret

00000250 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 250:	2f ef       	ldi	r18, 0xFF	; 255
 252:	81 ee       	ldi	r24, 0xE1	; 225
 254:	94 e0       	ldi	r25, 0x04	; 4
 256:	21 50       	subi	r18, 0x01	; 1
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	90 40       	sbci	r25, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <lcd_init+0x6>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <lcd_init+0x10>
 260:	00 00       	nop
  // delay for a bit so hardware can do it's thing
    _delay_ms(100);    
                               
    // note we start in 8 bit mode, so we gotta change that
    // Set up the RS and E lines for the 'lcd_write' subroutine.
    lcd_RS_port &= ~(1<<lcd_RS_bit);
 262:	85 b1       	in	r24, 0x05	; 5
 264:	8f 7d       	andi	r24, 0xDF	; 223
 266:	85 b9       	out	0x05, r24	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  
 268:	85 b1       	in	r24, 0x05	; 5
 26a:	87 7f       	andi	r24, 0xF7	; 247
 26c:	85 b9       	out	0x05, r24	; 5

    // Setup the LCD
    lcd_write(lcd_reset); // first part of reset sequence
 26e:	80 e3       	ldi	r24, 0x30	; 48
 270:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_write>
 274:	8f e3       	ldi	r24, 0x3F	; 63
 276:	9c e9       	ldi	r25, 0x9C	; 156
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <lcd_init+0x28>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <lcd_init+0x2e>
 27e:	00 00       	nop
    _delay_ms(10);

    lcd_write(lcd_reset); // second part of reset sequence
 280:	80 e3       	ldi	r24, 0x30	; 48
 282:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 286:	8f e1       	ldi	r24, 0x1F	; 31
 288:	93 e0       	ldi	r25, 0x03	; 3
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_init+0x3a>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <lcd_init+0x40>
 290:	00 00       	nop
    _delay_us(200);

    lcd_write(lcd_reset); // third part of reset sequence
 292:	80 e3       	ldi	r24, 0x30	; 48
 294:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_write>
 298:	8f e1       	ldi	r24, 0x1F	; 31
 29a:	93 e0       	ldi	r25, 0x03	; 3
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_init+0x4c>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <lcd_init+0x52>
 2a2:	00 00       	nop
    _delay_us(200); 
 
    lcd_write(lcd_setTo4Bit); // set 4-bit mode
 2a4:	88 e2       	ldi	r24, 0x28	; 40
 2a6:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_write>
 2aa:	8f e3       	ldi	r24, 0x3F	; 63
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <lcd_init+0x5e>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <lcd_init+0x64>
 2b4:	00 00       	nop
    _delay_us(80);

    // Function Set instruction
    lcd_write_instruction(lcd_setTo4Bit); 
 2b6:	88 e2       	ldi	r24, 0x28	; 40
 2b8:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_write_instruction>
 2bc:	8f e3       	ldi	r24, 0x3F	; 63
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <lcd_init+0x70>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <lcd_init+0x76>
 2c6:	00 00       	nop
    _delay_us(80);  

    // Display On
    lcd_write_instruction(lcd_DisplayOff);        
 2c8:	88 e0       	ldi	r24, 0x08	; 8
 2ca:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_write_instruction>
 2ce:	8f e3       	ldi	r24, 0x3F	; 63
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <lcd_init+0x82>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <lcd_init+0x88>
 2d8:	00 00       	nop
    _delay_us(80); 

    // Clear Display
    lcd_write_instruction(lcd_Clear);            
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e0:	8f e7       	ldi	r24, 0x7F	; 127
 2e2:	9e e3       	ldi	r25, 0x3E	; 62
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <lcd_init+0x94>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <lcd_init+0x9a>
 2ea:	00 00       	nop
    _delay_ms(4);                                  

    // Entry Mode Set instruction
    lcd_write_instruction(lcd_EntryMode);  
 2ec:	86 e0       	ldi	r24, 0x06	; 6
 2ee:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f2:	8f e3       	ldi	r24, 0x3F	; 63
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <lcd_init+0xa6>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <lcd_init+0xac>
 2fc:	00 00       	nop
    _delay_us(80);                                  
 
    // Display On/Off Control instruction
    lcd_write_instruction(lcd_DisplayOn);         
 2fe:	8c e0       	ldi	r24, 0x0C	; 12
 300:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_write_instruction>
 304:	8f e3       	ldi	r24, 0x3F	; 63
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <lcd_init+0xb8>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <lcd_init+0xbe>
 30e:	00 00       	nop
 310:	08 95       	ret

00000312 <main>:
/////////////////////////////////////////////////
// Function: move_to_line_2
// Purpose: moves cursor to line 2
/////////////////////////////////////////////////
int main(void)
{	
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	cd b7       	in	r28, 0x3d	; 61
 318:	de b7       	in	r29, 0x3e	; 62
 31a:	2a 97       	sbiw	r28, 0x0a	; 10
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	f8 94       	cli
 320:	de bf       	out	0x3e, r29	; 62
 322:	0f be       	out	0x3f, r0	; 63
 324:	cd bf       	out	0x3d, r28	; 61
	char cryptos[2][10] = { "Bitcoin",		// supported crypto names. Index = current crypto int
							"Ethereum"};
	char prices[2][10] = {"54802.80", "3286.23"}; 
	
	// configure the data lines for output to LCD
    lcd_D7_ddr |= (1<<lcd_D7_bit);
 326:	87 b1       	in	r24, 0x07	; 7
 328:	88 60       	ori	r24, 0x08	; 8
 32a:	87 b9       	out	0x07, r24	; 7
    lcd_D6_ddr |= (1<<lcd_D6_bit);
 32c:	87 b1       	in	r24, 0x07	; 7
 32e:	84 60       	ori	r24, 0x04	; 4
 330:	87 b9       	out	0x07, r24	; 7
    lcd_D5_ddr |= (1<<lcd_D5_bit);
 332:	87 b1       	in	r24, 0x07	; 7
 334:	82 60       	ori	r24, 0x02	; 2
 336:	87 b9       	out	0x07, r24	; 7
    lcd_D4_ddr |= (1<<lcd_D4_bit);
 338:	87 b1       	in	r24, 0x07	; 7
 33a:	81 60       	ori	r24, 0x01	; 1
 33c:	87 b9       	out	0x07, r24	; 7

	// configure the data lines for controlling the LCD
    lcd_E_ddr |= (1<<lcd_E_bit);        // Enable
 33e:	84 b1       	in	r24, 0x04	; 4
 340:	88 60       	ori	r24, 0x08	; 8
 342:	84 b9       	out	0x04, r24	; 4
    lcd_RS_ddr |= (1<<lcd_RS_bit);    // Register Select
 344:	84 b1       	in	r24, 0x04	; 4
 346:	80 62       	ori	r24, 0x20	; 32
 348:	84 b9       	out	0x04, r24	; 4

	// init lcd and usart
    lcd_init();
 34a:	0e 94 28 01 	call	0x250	; 0x250 <lcd_init>
	usart_init();
 34e:	0e 94 4b 00 	call	0x96	; 0x96 <usart_init>

	// Type welcome message
    lcd_write_str("Welcome to");
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_str>
    move_to_line_2();
 35a:	0e 94 1e 01 	call	0x23c	; 0x23c <move_to_line_2>
    lcd_write_str("CryptoTicker");
 35e:	8b e0       	ldi	r24, 0x0B	; 11
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_str>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 366:	2f ef       	ldi	r18, 0xFF	; 255
 368:	83 e2       	ldi	r24, 0x23	; 35
 36a:	94 ef       	ldi	r25, 0xF4	; 244
 36c:	21 50       	subi	r18, 0x01	; 1
 36e:	80 40       	sbci	r24, 0x00	; 0
 370:	90 40       	sbci	r25, 0x00	; 0
 372:	e1 f7       	brne	.-8      	; 0x36c <main+0x5a>
 374:	00 c0       	rjmp	.+0      	; 0x376 <main+0x64>
 376:	00 00       	nop
	
	// display welcome message for 5 seconds
	// and then clear the screen
	_delay_ms(5000);
	lcd_write_instruction(lcd_Clear);
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_write_instruction>
 37e:	ef ef       	ldi	r30, 0xFF	; 255
 380:	f7 ee       	ldi	r31, 0xE7	; 231
 382:	23 e0       	ldi	r18, 0x03	; 3
 384:	e1 50       	subi	r30, 0x01	; 1
 386:	f0 40       	sbci	r31, 0x00	; 0
 388:	20 40       	sbci	r18, 0x00	; 0
 38a:	e1 f7       	brne	.-8      	; 0x384 <main+0x72>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <main+0x7c>
 38e:	00 00       	nop
			_delay_ms(80);
			lcd_write_str(input_str);
			_delay_ms(2000);
		}*/
		while(1){
			char input_str[10] = {};
 390:	8e 01       	movw	r16, r28
 392:	0f 5f       	subi	r16, 0xFF	; 255
 394:	1f 4f       	sbci	r17, 0xFF	; 255
 396:	8a e0       	ldi	r24, 0x0A	; 10
 398:	f8 01       	movw	r30, r16
 39a:	11 92       	st	Z+, r1
 39c:	8a 95       	dec	r24
 39e:	e9 f7       	brne	.-6      	; 0x39a <main+0x88>
			get_string(input_str);
 3a0:	c8 01       	movw	r24, r16
 3a2:	0e 94 63 00 	call	0xc6	; 0xc6 <get_string>
			
			lcd_write_str(input_str);
 3a6:	c8 01       	movw	r24, r16
 3a8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_str>
 3ac:	ff ef       	ldi	r31, 0xFF	; 255
 3ae:	23 e2       	ldi	r18, 0x23	; 35
 3b0:	84 ef       	ldi	r24, 0xF4	; 244
 3b2:	f1 50       	subi	r31, 0x01	; 1
 3b4:	20 40       	sbci	r18, 0x00	; 0
 3b6:	80 40       	sbci	r24, 0x00	; 0
 3b8:	e1 f7       	brne	.-8      	; 0x3b2 <main+0xa0>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <main+0xaa>
 3bc:	00 00       	nop
			_delay_ms(5000);
			lcd_write_instruction(lcd_Clear);
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_write_instruction>
 3c4:	9f ef       	ldi	r25, 0xFF	; 255
 3c6:	e7 ee       	ldi	r30, 0xE7	; 231
 3c8:	f3 e0       	ldi	r31, 0x03	; 3
 3ca:	91 50       	subi	r25, 0x01	; 1
 3cc:	e0 40       	sbci	r30, 0x00	; 0
 3ce:	f0 40       	sbci	r31, 0x00	; 0
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <main+0xb8>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <main+0xc2>
 3d4:	00 00       	nop
 3d6:	dc cf       	rjmp	.-72     	; 0x390 <main+0x7e>

000003d8 <atoi>:
 3d8:	fc 01       	movw	r30, r24
 3da:	88 27       	eor	r24, r24
 3dc:	99 27       	eor	r25, r25
 3de:	e8 94       	clt
 3e0:	21 91       	ld	r18, Z+
 3e2:	20 32       	cpi	r18, 0x20	; 32
 3e4:	e9 f3       	breq	.-6      	; 0x3e0 <atoi+0x8>
 3e6:	29 30       	cpi	r18, 0x09	; 9
 3e8:	10 f0       	brcs	.+4      	; 0x3ee <atoi+0x16>
 3ea:	2e 30       	cpi	r18, 0x0E	; 14
 3ec:	c8 f3       	brcs	.-14     	; 0x3e0 <atoi+0x8>
 3ee:	2b 32       	cpi	r18, 0x2B	; 43
 3f0:	41 f0       	breq	.+16     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3f2:	2d 32       	cpi	r18, 0x2D	; 45
 3f4:	39 f4       	brne	.+14     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3f6:	68 94       	set
 3f8:	04 c0       	rjmp	.+8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fa:	0e 94 20 02 	call	0x440	; 0x440 <__mulhi_const_10>
 3fe:	82 0f       	add	r24, r18
 400:	91 1d       	adc	r25, r1
 402:	21 91       	ld	r18, Z+
 404:	20 53       	subi	r18, 0x30	; 48
 406:	2a 30       	cpi	r18, 0x0A	; 10
 408:	c0 f3       	brcs	.-16     	; 0x3fa <atoi+0x22>
 40a:	1e f4       	brtc	.+6      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40c:	90 95       	com	r25
 40e:	81 95       	neg	r24
 410:	9f 4f       	sbci	r25, 0xFF	; 255
 412:	08 95       	ret

00000414 <itoa>:
 414:	45 32       	cpi	r20, 0x25	; 37
 416:	51 05       	cpc	r21, r1
 418:	20 f4       	brcc	.+8      	; 0x422 <itoa+0xe>
 41a:	42 30       	cpi	r20, 0x02	; 2
 41c:	10 f0       	brcs	.+4      	; 0x422 <itoa+0xe>
 41e:	0c 94 15 02 	jmp	0x42a	; 0x42a <__itoa_ncheck>
 422:	fb 01       	movw	r30, r22
 424:	10 82       	st	Z, r1
 426:	cb 01       	movw	r24, r22
 428:	08 95       	ret

0000042a <__itoa_ncheck>:
 42a:	bb 27       	eor	r27, r27
 42c:	4a 30       	cpi	r20, 0x0A	; 10
 42e:	31 f4       	brne	.+12     	; 0x43c <__itoa_ncheck+0x12>
 430:	99 23       	and	r25, r25
 432:	22 f4       	brpl	.+8      	; 0x43c <__itoa_ncheck+0x12>
 434:	bd e2       	ldi	r27, 0x2D	; 45
 436:	90 95       	com	r25
 438:	81 95       	neg	r24
 43a:	9f 4f       	sbci	r25, 0xFF	; 255
 43c:	0c 94 29 02 	jmp	0x452	; 0x452 <__utoa_common>

00000440 <__mulhi_const_10>:
 440:	7a e0       	ldi	r23, 0x0A	; 10
 442:	97 9f       	mul	r25, r23
 444:	90 2d       	mov	r25, r0
 446:	87 9f       	mul	r24, r23
 448:	80 2d       	mov	r24, r0
 44a:	91 0d       	add	r25, r1
 44c:	11 24       	eor	r1, r1
 44e:	08 95       	ret

00000450 <__utoa_ncheck>:
 450:	bb 27       	eor	r27, r27

00000452 <__utoa_common>:
 452:	fb 01       	movw	r30, r22
 454:	55 27       	eor	r21, r21
 456:	aa 27       	eor	r26, r26
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	aa 1f       	adc	r26, r26
 45e:	a4 17       	cp	r26, r20
 460:	10 f0       	brcs	.+4      	; 0x466 <__utoa_common+0x14>
 462:	a4 1b       	sub	r26, r20
 464:	83 95       	inc	r24
 466:	50 51       	subi	r21, 0x10	; 16
 468:	b9 f7       	brne	.-18     	; 0x458 <__utoa_common+0x6>
 46a:	a0 5d       	subi	r26, 0xD0	; 208
 46c:	aa 33       	cpi	r26, 0x3A	; 58
 46e:	08 f0       	brcs	.+2      	; 0x472 <__utoa_common+0x20>
 470:	a9 5d       	subi	r26, 0xD9	; 217
 472:	a1 93       	st	Z+, r26
 474:	00 97       	sbiw	r24, 0x00	; 0
 476:	79 f7       	brne	.-34     	; 0x456 <__utoa_common+0x4>
 478:	b1 11       	cpse	r27, r1
 47a:	b1 93       	st	Z+, r27
 47c:	11 92       	st	Z+, r1
 47e:	cb 01       	movw	r24, r22
 480:	0c 94 42 02 	jmp	0x484	; 0x484 <strrev>

00000484 <strrev>:
 484:	dc 01       	movw	r26, r24
 486:	fc 01       	movw	r30, r24
 488:	67 2f       	mov	r22, r23
 48a:	71 91       	ld	r23, Z+
 48c:	77 23       	and	r23, r23
 48e:	e1 f7       	brne	.-8      	; 0x488 <strrev+0x4>
 490:	32 97       	sbiw	r30, 0x02	; 2
 492:	04 c0       	rjmp	.+8      	; 0x49c <strrev+0x18>
 494:	7c 91       	ld	r23, X
 496:	6d 93       	st	X+, r22
 498:	70 83       	st	Z, r23
 49a:	62 91       	ld	r22, -Z
 49c:	ae 17       	cp	r26, r30
 49e:	bf 07       	cpc	r27, r31
 4a0:	c8 f3       	brcs	.-14     	; 0x494 <strrev+0x10>
 4a2:	08 95       	ret

000004a4 <_exit>:
 4a4:	f8 94       	cli

000004a6 <__stop_program>:
 4a6:	ff cf       	rjmp	.-2      	; 0x4a6 <__stop_program>
